#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Facebook —Ç–æ–∫–µ–Ω–∞ –∑ —Ä–æ–∑—à–∏—Ä–µ–Ω–∏–º–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞–º–∏
"""

import urllib.request
import urllib.parse
import json
import sys
import time

def test_token_comprehensive(token):
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Facebook —Ç–æ–∫–µ–Ω–∞"""
    
    print("üîç === –ö–û–ú–ü–õ–ï–ö–°–ù–ê –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê FACEBOOK –¢–û–ö–ï–ù–ê ===\n")
    print(f"üìù –¢–æ–∫–µ–Ω: {token[:20]}...{token[-10:]}")
    print(f"üìè –î–æ–≤–∂–∏–Ω–∞: {len(token)} —Å–∏–º–≤–æ–ª—ñ–≤\n")
    
    # ===============================
    # –ö–†–û–ö 1: –ë–∞–∑–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
    # ===============================
    print("üîÑ –ö–†–û–ö 1: –ë–∞–∑–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞")
    try:
        url = "https://graph.facebook.com/v18.0/me"
        params = {'access_token': token}
        
        query_string = urllib.parse.urlencode(params)
        full_url = f"{url}?{query_string}"
        
        request = urllib.request.Request(full_url)
        with urllib.request.urlopen(request) as response:
            user_data = json.loads(response.read().decode('utf-8'))
            
        print(f"‚úÖ –¢–æ–∫–µ–Ω –≤–∞–ª—ñ–¥–Ω–∏–π!")
        print(f"   üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {user_data.get('name', 'N/A')}")
        print(f"   üÜî ID: {user_data.get('id', 'N/A')}")
        
        user_id = user_data.get('id')
        
    except urllib.error.HTTPError as e:
        error_data = e.read().decode('utf-8')
        try:
            error_json = json.loads(error_data)
            error_msg = error_json.get('error', {}).get('message', 'Unknown error')
            error_code = error_json.get('error', {}).get('code', 'Unknown')
        except:
            error_msg = error_data
            error_code = e.code
            
        print(f"‚ùå –¢–æ–∫–µ–Ω –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏–π: {error_msg} (–∫–æ–¥: {error_code})")
        
        if error_code == 190:
            print("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è: –¢–æ–∫–µ–Ω –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏–π, –∑–≥–µ–Ω–µ—Ä—É–π—Ç–µ –Ω–æ–≤–∏–π")
        elif error_code == 1:
            print("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –∑–∞–ø–∏—Ç –∞–±–æ —Ç–æ–∫–µ–Ω. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞")
            
        return False
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É: {e}")
        return False
    
    # ===============================
    # –ö–†–û–ö 2: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ–∑–≤–æ–ª—ñ–≤
    # ===============================
    print("\nüîÑ –ö–†–û–ö 2: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ–∑–≤–æ–ª—ñ–≤ —Ç–æ–∫–µ–Ω–∞")
    try:
        url = "https://graph.facebook.com/v18.0/me/permissions"
        params = {'access_token': token}
        
        query_string = urllib.parse.urlencode(params)
        full_url = f"{url}?{query_string}"
        
        request = urllib.request.Request(full_url)
        with urllib.request.urlopen(request) as response:
            perm_data = json.loads(response.read().decode('utf-8'))
            
        granted_perms = [p['permission'] for p in perm_data.get('data', []) if p.get('status') == 'granted']
        declined_perms = [p['permission'] for p in perm_data.get('data', []) if p.get('status') == 'declined']
        
        print(f"‚úÖ –î–æ–∑–≤–æ–ª–∏ –æ—Ç—Ä–∏–º–∞–Ω—ñ!")
        print(f"üìä –í—Å—å–æ–≥–æ –¥–æ–∑–≤–æ–ª—ñ–≤: {len(perm_data.get('data', []))}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –¥–æ–∑–≤–æ–ª–∏ –¥–ª—è —Ä–µ–∫–ª–∞–º–Ω–∏—Ö –∫–∞–±—ñ–Ω–µ—Ç—ñ–≤
        required_perms = ['ads_read', 'ads_management', 'business_management']
        
        print("\nüìã –ù–µ–æ–±—Ö—ñ–¥–Ω—ñ –¥–æ–∑–≤–æ–ª–∏ –¥–ª—è —Ä–µ–∫–ª–∞–º–Ω–∏—Ö –∫–∞–±—ñ–Ω–µ—Ç—ñ–≤:")
        for perm in required_perms:
            if perm in granted_perms:
                print(f"   ‚úÖ {perm}: –ù–ê–î–ê–ù–û")
            elif perm in declined_perms:
                print(f"   ‚ùå {perm}: –í–Ü–î–•–ò–õ–ï–ù–û")
            else:
                print(f"   ‚ö†Ô∏è {perm}: –ù–ï –ó–ê–ü–ò–¢–£–í–ê–õ–û–°–Ø")
                
        ads_perms_granted = any(perm in granted_perms for perm in required_perms)
        
        if not ads_perms_granted:
            print("\n‚ö†Ô∏è –£–≤–∞–≥–∞: –í—ñ–¥—Å—É—Ç–Ω—ñ –¥–æ–∑–≤–æ–ª–∏ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ —Ä–µ–∫–ª–∞–º–Ω–∏–º–∏ –∫–∞–±—ñ–Ω–µ—Ç–∞–º–∏!")
            
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥–æ–∑–≤–æ–ª—ñ–≤: {e}")
        ads_perms_granted = False
    
    # ===============================
    # –ö–†–û–ö 3: –°–ø—Ä–æ–±–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ —Ä–µ–∫–ª–∞–º–Ω–∏—Ö –∫–∞–±—ñ–Ω–µ—Ç—ñ–≤
    # ===============================
    print("\nüîÑ –ö–†–û–ö 3: –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø—É –¥–æ —Ä–µ–∫–ª–∞–º–Ω–∏—Ö –∫–∞–±—ñ–Ω–µ—Ç—ñ–≤")
    
    # –ú–µ—Ç–æ–¥ 1: /me/adaccounts
    print("\nüß™ –ú–µ—Ç–æ–¥ 1: /me/adaccounts")
    try:
        url = "https://graph.facebook.com/v18.0/me/adaccounts"
        params = {
            'access_token': token,
            'fields': 'name,account_id,currency,account_status,timezone_name,balance'
        }
        
        query_string = urllib.parse.urlencode(params)
        full_url = f"{url}?{query_string}"
        
        request = urllib.request.Request(full_url)
        with urllib.request.urlopen(request) as response:
            ads_data = json.loads(response.read().decode('utf-8'))
            
        if 'data' in ads_data:
            print(f"‚úÖ –£—Å–ø—ñ—Ö! –ó–Ω–∞–π–¥–µ–Ω–æ {len(ads_data['data'])} —Ä–µ–∫–ª–∞–º–Ω–∏—Ö –∫–∞–±—ñ–Ω–µ—Ç—ñ–≤:")
            for account in ads_data['data'][:5]:  # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ 5
                print(f"   üìä {account.get('name', 'N/A')} (ID: {account.get('account_id', 'N/A')})")
                print(f"       –í–∞–ª—é—Ç–∞: {account.get('currency', 'N/A')}, –°—Ç–∞—Ç—É—Å: {account.get('account_status', 'N/A')}")
            
            if len(ads_data['data']) > 5:
                print(f"   ... —Ç–∞ —â–µ {len(ads_data['data']) - 5} –∫–∞–±—ñ–Ω–µ—Ç—ñ–≤")
                
            return True
        else:
            print("‚ö†Ô∏è –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –ø—Ä–æ —Ä–µ–∫–ª–∞–º–Ω—ñ –∫–∞–±—ñ–Ω–µ—Ç–∏")
            
    except urllib.error.HTTPError as e:
        error_data = e.read().decode('utf-8')
        try:
            error_json = json.loads(error_data)
            error_msg = error_json.get('error', {}).get('message', 'Unknown error')
            error_code = error_json.get('error', {}).get('code', 'Unknown')
        except:
            error_msg = error_data
            error_code = e.code
            
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {error_msg} (–∫–æ–¥: {error_code})")
        
        if error_code == 200:
            print("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è: –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–æ–∑–≤–æ–ª—ñ–≤. –î–æ–¥–∞–π—Ç–µ 'ads_read' –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ç–æ–∫–µ–Ω–∞")
        elif error_code == 190:
            print("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è: –¢–æ–∫–µ–Ω –Ω–µ–¥—ñ–π—Å–Ω–∏–π –∞–±–æ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏–π")
            
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É: {e}")
    
    # –ú–µ—Ç–æ–¥ 2: –ß–µ—Ä–µ–∑ –±—ñ–∑–Ω–µ—Å–∏
    print("\nüß™ –ú–µ—Ç–æ–¥ 2: –ß–µ—Ä–µ–∑ –±—ñ–∑–Ω–µ—Å-–∞–∫–∞—É–Ω—Ç–∏")
    try:
        url = "https://graph.facebook.com/v18.0/me/businesses"
        params = {
            'access_token': token,
            'fields': 'name,id,created_time'
        }
        
        query_string = urllib.parse.urlencode(params)
        full_url = f"{url}?{query_string}"
        
        request = urllib.request.Request(full_url)
        with urllib.request.urlopen(request) as response:
            business_data = json.loads(response.read().decode('utf-8'))
            
        if 'data' in business_data and business_data['data']:
            print(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ {len(business_data['data'])} –±—ñ–∑–Ω–µ—Å-–∞–∫–∞—É–Ω—Ç—ñ–≤:")
            
            for business in business_data['data'][:3]:  # –ü–µ—Ä—à—ñ 3 –±—ñ–∑–Ω–µ—Å–∏
                print(f"   üè¢ {business.get('name', 'N/A')} (ID: {business.get('id', 'N/A')})")
                
                # –°–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ–∫–ª–∞–º–Ω—ñ –∫–∞–±—ñ–Ω–µ—Ç–∏ –±—ñ–∑–Ω–µ—Å—É
                try:
                    biz_ads_url = f"https://graph.facebook.com/v18.0/{business['id']}/owned_ad_accounts"
                    biz_params = {
                        'access_token': token,
                        'fields': 'name,account_id,currency'
                    }
                    
                    biz_query = urllib.parse.urlencode(biz_params)
                    biz_full_url = f"{biz_ads_url}?{biz_query}"
                    
                    biz_request = urllib.request.Request(biz_full_url)
                    with urllib.request.urlopen(biz_request) as biz_response:
                        biz_ads_data = json.loads(biz_response.read().decode('utf-8'))
                        
                    if 'data' in biz_ads_data:
                        print(f"     üìä –†–µ–∫–ª–∞–º–Ω–∏—Ö –∫–∞–±—ñ–Ω–µ—Ç—ñ–≤: {len(biz_ads_data['data'])}")
                        for acc in biz_ads_data['data'][:2]:
                            print(f"       - {acc.get('name', 'N/A')} ({acc.get('account_id', 'N/A')})")
                            
                except Exception as biz_e:
                    print(f"     ‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–∞–±—ñ–Ω–µ—Ç—ñ–≤: {biz_e}")
        else:
            print("‚ö†Ô∏è –ë—ñ–∑–Ω–µ—Å-–∞–∫–∞—É–Ω—Ç–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ –∞–±–æ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
            
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –±—ñ–∑–Ω–µ—Å—ñ–≤: {e}")
    
    # ===============================
    # –ö–†–û–ö 4: Debug —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è —Ç–æ–∫–µ–Ω–∞
    # ===============================
    print("\nüîÑ –ö–†–û–ö 4: Debug —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è —Ç–æ–∫–µ–Ω–∞")
    try:
        url = "https://graph.facebook.com/debug_token"
        params = {
            'input_token': token,
            'access_token': token
        }
        
        query_string = urllib.parse.urlencode(params)
        full_url = f"{url}?{query_string}"
        
        request = urllib.request.Request(full_url)
        with urllib.request.urlopen(request) as response:
            debug_data = json.loads(response.read().decode('utf-8'))
            
        token_info = debug_data.get('data', {})
        
        print(f"‚úÖ Debug —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:")
        print(f"   üÜî App ID: {token_info.get('app_id', 'N/A')}")
        print(f"   üë§ User ID: {token_info.get('user_id', 'N/A')}")
        print(f"   ‚è∞ –í–∞–ª—ñ–¥–Ω–∏–π: {token_info.get('is_valid', 'N/A')}")
        print(f"   üîê –¢–∏–ø: {token_info.get('type', 'N/A')}")
        print(f"   üì± –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {token_info.get('application', 'N/A')}")
        
        expires_at = token_info.get('expires_at')
        if expires_at:
            import datetime
            exp_date = datetime.datetime.fromtimestamp(expires_at)
            print(f"   ‚è≥ –¢–µ—Ä–º—ñ–Ω –¥—ñ—ó –¥–æ: {exp_date}")
        else:
            print(f"   ‚è≥ –¢–µ—Ä–º—ñ–Ω –¥—ñ—ó: –ù–µ –º–∞—î —Ç–µ—Ä–º—ñ–Ω—É –¥—ñ—ó")
            
        scopes = token_info.get('scopes', [])
        if scopes:
            print(f"   üìã –î–æ–∑–≤–æ–ª–∏ –≤ —Ç–æ–∫–µ–Ω—ñ: {', '.join(scopes)}")
            
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ debug —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó: {e}")
    
    print("\nüéØ === –ó–ê–í–ï–†–®–ï–ù–ù–Ø –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ò ===")
    return False

def main():
    if len(sys.argv) != 2:
        print("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: python3 comprehensive_token_test.py <FACEBOOK_TOKEN>")
        print("–ü—Ä–∏–∫–ª–∞–¥: python3 comprehensive_token_test.py EAABs...")
        sys.exit(1)
    
    token = sys.argv[1].strip()
    
    if not token:
        print("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º")
        sys.exit(1)
        
    if len(token) < 50:
        print("‚ö†Ô∏è –£–≤–∞–≥–∞: –¢–æ–∫–µ–Ω –∑–¥–∞—î—Ç—å—Å—è –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–º")
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫—É
    success = test_token_comprehensive(token)
    
    if success:
        print("\nüéâ –¢–æ–∫–µ–Ω –ø—Ä–∞—Ü—é—î –∑ —Ä–µ–∫–ª–∞–º–Ω–∏–º–∏ –∫–∞–±—ñ–Ω–µ—Ç–∞–º–∏!")
        print("üí° –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –æ–Ω–æ–≤–∏—Ç–∏ –π–æ–≥–æ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö —ñ —Ç–µ—Å—Ç—É–≤–∞—Ç–∏ API")
    else:
        print("\n‚ùå –¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–∞—Ü—é—î –∑ —Ä–µ–∫–ª–∞–º–Ω–∏–º–∏ –∫–∞–±—ñ–Ω–µ—Ç–∞–º–∏")
        print("üí° –ó–≥–µ–Ω–µ—Ä—É–π—Ç–µ –Ω–æ–≤–∏–π —Ç–æ–∫–µ–Ω –∑ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏–º–∏ –¥–æ–∑–≤–æ–ª–∞–º–∏:")
        print("   - ads_read")
        print("   - business_management") 
        print("   - ads_management (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)")

if __name__ == "__main__":
    main()