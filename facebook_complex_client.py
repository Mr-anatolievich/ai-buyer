#!/usr/bin/env python3
"""
Facebook API Client –∑ –∫–æ–º–ø–ª–µ–∫—Å–Ω–∏–º –ø—ñ–¥—Ö–æ–¥–æ–º
–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î user token, user agent, Facebook ID —Ç–∞ cookies –¥–ª—è –¥–æ—Å—Ç—É–ø—É –¥–æ —Ä–µ–∫–ª–∞–º–Ω–∏—Ö –∫–∞–±—ñ–Ω–µ—Ç—ñ–≤
"""

import urllib.request
import urllib.parse
import json
import re
import time
from typing import Dict, Optional, List, Any

class FacebookAdsAccess:
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω–∏–π –∫–ª—ñ—î–Ω—Ç –¥–ª—è –¥–æ—Å—Ç—É–ø—É –¥–æ Facebook —Ä–µ–∫–ª–∞–º–Ω–∏—Ö –∫–∞–±—ñ–Ω–µ—Ç—ñ–≤"""
    
    def __init__(self, user_token: str, cookies: str, user_agent: str, facebook_id: str):
        self.user_token = user_token
        self.cookies = cookies
        self.user_agent = user_agent
        self.facebook_id = facebook_id
        self.base_url = 'https://graph.facebook.com/v19.0'
        
        # –í–∏—Ç—è–≥—É—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑ cookies
        self.cookie_params = self._extract_from_cookies(cookies)
        
    def _extract_from_cookies(self, cookies: str) -> Dict[str, str]:
        """–í–∏—Ç—è–≥—É—î –≤–∞–∂–ª–∏–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑ cookies"""
        cookie_obj = {}
        if cookies:
            for cookie in cookies.split(';'):
                if '=' in cookie:
                    key, value = cookie.strip().split('=', 1)
                    cookie_obj[key] = value
        
        return {
            'session_id': cookie_obj.get('xs', cookie_obj.get('c_user', '')),
            'dtsg': cookie_obj.get('fb_dtsg', ''),
            'lsd': cookie_obj.get('lsd', ''),
            'spin': cookie_obj.get('spin', ''),
            'datr': cookie_obj.get('datr', ''),
            'sb': cookie_obj.get('sb', '')
        }
    
    def _get_common_headers(self, referer: str = None) -> Dict[str, str]:
        """–°—Ç–≤–æ—Ä—é—î –∑–∞–≥–∞–ª—å–Ω—ñ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø–∏—Ç—ñ–≤"""
        headers = {
            'User-Agent': self.user_agent,
            'Cookie': self.cookies,
            'Accept': 'application/json, text/plain, */*',
            'Accept-Language': 'uk-UA,uk;q=0.9,en-US;q=0.8,en;q=0.7',
            'Accept-Encoding': 'gzip, deflate, br',
            'Connection': 'keep-alive',
            'Sec-Fetch-Dest': 'empty',
            'Sec-Fetch-Mode': 'cors',
            'Sec-Fetch-Site': 'cross-site',
            'Cache-Control': 'no-cache',
            'Pragma': 'no-cache'
        }
        
        if referer:
            headers['Referer'] = referer
            headers['Origin'] = 'https://www.facebook.com'
            
        if self.cookie_params.get('dtsg'):
            headers['X-FB-DTSG'] = self.cookie_params['dtsg']
        if self.cookie_params.get('lsd'):
            headers['X-FB-LSD'] = self.cookie_params['lsd']
            
        return headers
    
    async def get_ad_accounts(self) -> Dict[str, Any]:
        """–û—Ç—Ä–∏–º—É—î —Ä–µ–∫–ª–∞–º–Ω—ñ –∫–∞–±—ñ–Ω–µ—Ç–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ —Ä—ñ–∑–Ω—ñ –º–µ—Ç–æ–¥–∏"""
        
        methods = [
            ('Direct API', self._try_direct_api),
            ('Full Headers API', self._try_with_full_headers),
            ('Me Endpoint', self._try_me_endpoint),
            ('Business Accounts', self._try_business_accounts),
            ('Alternative Endpoint', self._try_alternative_endpoint)
        ]
        
        last_error = None
        
        for method_name, method in methods:
            try:
                print(f"üîÑ –°–ø—Ä–æ–±—É—î–º–æ –º–µ—Ç–æ–¥: {method_name}")
                result = await method()
                
                if result and 'data' in result:
                    print(f"‚úÖ –£—Å–ø—ñ—Ö –∑ –º–µ—Ç–æ–¥–æ–º: {method_name}")
                    print(f"üìä –ó–Ω–∞–π–¥–µ–Ω–æ {len(result['data'])} —Ä–µ–∫–ª–∞–º–Ω–∏—Ö –∫–∞–±—ñ–Ω–µ—Ç—ñ–≤")
                    return {
                        'status': 'success',
                        'method': method_name,
                        'data': result['data'],
                        'paging': result.get('paging', {})
                    }
                elif result and 'error' not in result:
                    print(f"‚ö†Ô∏è –ú–µ—Ç–æ–¥ {method_name}: –æ—Ç—Ä–∏–º–∞–Ω–æ –¥–∞–Ω—ñ –±–µ–∑ –ø–æ–ª—è 'data'")
                    return {
                        'status': 'success', 
                        'method': method_name,
                        'data': result
                    }
                    
            except Exception as e:
                print(f"‚ùå –ú–µ—Ç–æ–¥ {method_name} –ø—Ä–æ–≤–∞–ª–∏–≤—Å—è: {e}")
                last_error = e
                time.sleep(1)  # –ü–∞—É–∑–∞ –º—ñ–∂ —Å–ø—Ä–æ–±–∞–º–∏
                
        # –Ø–∫—â–æ –≤—Å—ñ –º–µ—Ç–æ–¥–∏ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—è
        return {
            'status': 'error',
            'message': f'–£—Å—ñ –º–µ—Ç–æ–¥–∏ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—è. –û—Å—Ç–∞–Ω–Ω—è –ø–æ–º–∏–ª–∫–∞: {last_error}',
            'attempted_methods': [name for name, _ in methods]
        }
    
    async def _try_direct_api(self) -> Optional[Dict]:
        """–ú–µ—Ç–æ–¥ 1: –ü—Ä—è–º–∏–π API –∑–∞–ø–∏—Ç"""
        url = f"{self.base_url}/me/adaccounts"
        params = {
            'access_token': self.user_token,
            'fields': 'id,name,account_id,currency,account_status,timezone_name,business,spend_cap,daily_spend_limit,amount_spent,balance',
            'limit': '50'
        }
        
        query_string = urllib.parse.urlencode(params)
        full_url = f"{url}?{query_string}"
        
        request = urllib.request.Request(full_url)
        request.add_header('User-Agent', self.user_agent)
        
        with urllib.request.urlopen(request) as response:
            data = response.read()
            return json.loads(data.decode('utf-8'))
    
    async def _try_with_full_headers(self) -> Optional[Dict]:
        """–ú–µ—Ç–æ–¥ 2: API –∑–∞–ø–∏—Ç –∑ –ø–æ–≤–Ω–∏–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏"""
        url = f"{self.base_url}/me/adaccounts"
        params = {
            'access_token': self.user_token,
            'fields': 'id,name,account_id,currency,account_status,timezone_name,business',
            'limit': '50'
        }
        
        query_string = urllib.parse.urlencode(params)
        full_url = f"{url}?{query_string}"
        
        headers = self._get_common_headers('https://www.facebook.com/adsmanager/')
        
        request = urllib.request.Request(full_url)
        for key, value in headers.items():
            request.add_header(key, value)
            
        with urllib.request.urlopen(request) as response:
            data = response.read()
            return json.loads(data.decode('utf-8'))
    
    async def _try_me_endpoint(self) -> Optional[Dict]:
        """–ú–µ—Ç–æ–¥ 3: –ó–∞–ø–∏—Ç —á–µ—Ä–µ–∑ /me –∑ –ø—ñ–¥–∑–∞–ø–∏—Ç–æ–º adaccounts"""
        url = f"{self.base_url}/me"
        params = {
            'access_token': self.user_token,
            'fields': 'id,name,adaccounts{id,name,account_id,currency,account_status,timezone_name,business}',
        }
        
        query_string = urllib.parse.urlencode(params)
        full_url = f"{url}?{query_string}"
        
        headers = self._get_common_headers()
        
        request = urllib.request.Request(full_url)
        for key, value in headers.items():
            request.add_header(key, value)
            
        with urllib.request.urlopen(request) as response:
            data = response.read()
            result = json.loads(data.decode('utf-8'))
            
            # –ü–µ—Ä–µ—Ñ–æ—Ä–º–∞—Ç—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if 'adaccounts' in result and 'data' in result['adaccounts']:
                return result['adaccounts']
            return result
    
    async def _try_business_accounts(self) -> Optional[Dict]:
        """–ú–µ—Ç–æ–¥ 4: –ß–µ—Ä–µ–∑ –±—ñ–∑–Ω–µ—Å –∞–∫–∞—É–Ω—Ç–∏"""
        # –°–ø–µ—Ä—à—É –æ—Ç—Ä–∏–º—É—î–º–æ –±—ñ–∑–Ω–µ—Å–∏
        url = f"{self.base_url}/me/businesses"
        params = {
            'access_token': self.user_token,
            'fields': 'id,name'
        }
        
        query_string = urllib.parse.urlencode(params)
        full_url = f"{url}?{query_string}"
        
        headers = self._get_common_headers()
        request = urllib.request.Request(full_url)
        for key, value in headers.items():
            request.add_header(key, value)
            
        with urllib.request.urlopen(request) as response:
            data = response.read()
            businesses = json.loads(data.decode('utf-8'))
            
        # –Ø–∫—â–æ —î –±—ñ–∑–Ω–µ—Å–∏, –æ—Ç—Ä–∏–º—É—î–º–æ —ó—Ö —Ä–µ–∫–ª–∞–º–Ω—ñ –∫–∞–±—ñ–Ω–µ—Ç–∏
        all_accounts = []
        for business in businesses.get('data', []):
            try:
                business_url = f"{self.base_url}/{business['id']}/owned_ad_accounts"
                business_params = {
                    'access_token': self.user_token,
                    'fields': 'id,name,account_id,currency,account_status'
                }
                
                business_query = urllib.parse.urlencode(business_params)
                business_full_url = f"{business_url}?{business_query}"
                
                business_request = urllib.request.Request(business_full_url)
                for key, value in headers.items():
                    business_request.add_header(key, value)
                    
                with urllib.request.urlopen(business_request) as business_response:
                    business_data = business_response.read()
                    business_accounts = json.loads(business_data.decode('utf-8'))
                    all_accounts.extend(business_accounts.get('data', []))
                    
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫–∞–±—ñ–Ω–µ—Ç–∏ –¥–ª—è –±—ñ–∑–Ω–µ—Å—É {business['id']}: {e}")
                
        return {'data': all_accounts} if all_accounts else None
    
    async def _try_alternative_endpoint(self) -> Optional[Dict]:
        """–ú–µ—Ç–æ–¥ 5: –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π endpoint"""
        url = f"{self.base_url}/{self.facebook_id}/adaccounts"
        params = {
            'access_token': self.user_token,
            'fields': 'id,name,account_id,currency,account_status,timezone_name',
            'limit': '50'
        }
        
        query_string = urllib.parse.urlencode(params)
        full_url = f"{url}?{query_string}"
        
        headers = self._get_common_headers()
        
        request = urllib.request.Request(full_url)
        for key, value in headers.items():
            request.add_header(key, value)
            
        with urllib.request.urlopen(request) as response:
            data = response.read()
            return json.loads(data.decode('utf-8'))


def test_facebook_access():
    """–¢–µ—Å—Ç–æ–≤–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø—É"""
    
    # –¢–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ (–∑–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ñ)
    test_data = {
        'user_token': 'EAABs...–≤–∞—à_—Ç–æ–∫–µ–Ω',
        'cookies': 'datr=...; sb=...; c_user=...; xs=...',
        'user_agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36',
        'facebook_id': '100009868933766'
    }
    
    print("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è Facebook –¥–æ—Å—Ç—É–ø—É...")
    
    client = FacebookAdsAccess(
        test_data['user_token'],
        test_data['cookies'], 
        test_data['user_agent'],
        test_data['facebook_id']
    )
    
    print("üîç –í–∏—Ç—è–≥–Ω—É—Ç—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑ cookies:")
    for key, value in client.cookie_params.items():
        if value:
            print(f"   {key}: {value[:20]}..." if len(value) > 20 else f"   {key}: {value}")
    
    # –í —Ä–µ–∞–ª—å–Ω–æ–º—É –∑–∞—Å—Ç–æ—Å—É–Ω–∫—É —Ç—É—Ç –±—É–¥–µ await client.get_ad_accounts()
    print("‚úÖ –ö–ª—ñ—î–Ω—Ç —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
    
    return client

    def _sync_request(self, url: str, params: Dict[str, str], use_full_headers: bool = False, extract_adaccounts: bool = False) -> Optional[Dict]:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ –≤–µ—Ä—Å—ñ—è –∑–∞–ø–∏—Ç—É"""
        query_string = urllib.parse.urlencode(params)
        full_url = f"{url}?{query_string}"
        
        request = urllib.request.Request(full_url)
        
        if use_full_headers:
            headers = self._get_common_headers('https://www.facebook.com/adsmanager/')
            for key, value in headers.items():
                request.add_header(key, value)
        else:
            request.add_header('User-Agent', self.user_agent)
            if self.cookies:
                request.add_header('Cookie', self.cookies)
        
        with urllib.request.urlopen(request) as response:
            data = response.read()
            result = json.loads(data.decode('utf-8'))
            
            if extract_adaccounts and 'adaccounts' in result:
                return result['adaccounts']
            return result
    
    def _sync_business_request(self) -> Optional[Dict]:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ –≤–µ—Ä—Å—ñ—è –∑–∞–ø–∏—Ç—É —á–µ—Ä–µ–∑ –±—ñ–∑–Ω–µ—Å –∞–∫–∞—É–Ω—Ç–∏"""
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ –±—ñ–∑–Ω–µ—Å–∏
            businesses_result = self._sync_request(f"{self.base_url}/me/businesses", {
                'access_token': self.user_token,
                'fields': 'id,name'
            })
            
            all_accounts = []
            for business in businesses_result.get('data', []):
                try:
                    business_accounts = self._sync_request(
                        f"{self.base_url}/{business['id']}/owned_ad_accounts", 
                        {
                            'access_token': self.user_token,
                            'fields': 'id,name,account_id,currency,account_status'
                        }
                    )
                    all_accounts.extend(business_accounts.get('data', []))
                except Exception as e:
                    print(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫–∞–±—ñ–Ω–µ—Ç–∏ –¥–ª—è –±—ñ–∑–Ω–µ—Å—É {business['id']}: {e}")
                    
            return {'data': all_accounts} if all_accounts else None
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É –±—ñ–∑–Ω–µ—Å –∞–∫–∞—É–Ω—Ç—ñ–≤: {e}")
            return None

if __name__ == "__main__":
    test_facebook_access()