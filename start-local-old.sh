#!/bin/bash

# AI-Buyer Local Development Startup Script
# –ó–∞–ø—É—Å–∫ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏ –±–µ–∑ Docker –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ—ó —Ä–æ–∑—Ä–æ–±–∫–∏

echo "üöÄ AI-Buyer Local Development Start"
echo "=================================="

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Python
if ! command -v python3 &> /dev/null; then
    echo "‚ùå Python3 –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
    exit 1
fi

echo "‚úÖ Python $(python3 --version) –∑–Ω–∞–π–¥–µ–Ω–æ"

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Node.js
if ! command -v node &> /dev/null; then
    echo "‚ùå Node.js –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
    exit 1
fi

echo "‚úÖ Node.js $(node --version) –∑–Ω–∞–π–¥–µ–Ω–æ"

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è .env.local —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞—î
if [ ! -f .env.local ]; then
    echo "üìù –°—Ç–≤–æ—Ä–µ–Ω–Ω—è .env.local..."
    cp .env.development .env.local
fi

echo ""
echo "üéØ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤:"
echo ""

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –¥–ª—è –ª–æ–≥—ñ–≤
mkdir -p logs

# 1. Frontend
echo "üåê –ó–∞–ø—É—Å–∫ Frontend (React)..."
cd frontend
npm install > /dev/null 2>&1
nohup npm run dev > ../logs/frontend.log 2>&1 &
FRONTEND_PID=$!
cd ..

# –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–∞–ø—É—Å–∫—É frontend
sleep 5

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ frontend –∑–∞–ø—É—Å—Ç–∏–≤—Å—è
if curl -s http://localhost:8080 > /dev/null 2>&1; then
    echo "‚úÖ Frontend: http://localhost:8080"
else
    echo "‚ö†Ô∏è  Frontend: –ó–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è... (–ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ —á–µ—Ä–µ–∑ —Ö–≤–∏–ª–∏–Ω—É)"
fi

# 2. Backend (Mock API –¥–ª—è —Ä–æ–∑—Ä–æ–±–∫–∏)
echo "üîß –ó–∞–ø—É—Å–∫ Mock Backend API..."

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —ñ—Å–Ω—É—î mock_server.py
if [ ! -f "mock_server.py" ]; then
    echo "‚ùå mock_server.py –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ! –°—Ç–≤–æ—Ä—ñ—Ç—å —Ñ–∞–π–ª –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ backend/simple_main.py"
    exit 1
fi
#!/usr/bin/env python3
"""
AI-Buyer Mock Backend Server
–ü—Ä–æ—Å—Ç–∏–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ—ó —Ä–æ–∑—Ä–æ–±–∫–∏ –±–µ–∑ –ø–æ–≤–Ω–æ—ó ML —ñ–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∏
"""

from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
import uvicorn
import json
from datetime import datetime
import random

app = FastAPI(
    title="AI-Buyer Mock API",
    description="Mock backend –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ—ó —Ä–æ–∑—Ä–æ–±–∫–∏",
    version="1.0.0"
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:8080", "http://localhost:3000"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

@app.get("/")
async def root():
    return {"message": "AI-Buyer Mock API", "status": "running"}

@app.get("/health")
async def health():
    return {"status": "healthy", "timestamp": datetime.now().isoformat()}

@app.get("/api/v1/campaigns")
async def get_campaigns():
    """Mock campaigns data"""
    return {
        "campaigns": [
            {
                "id": "campaign_1",
                "name": "Summer Sale 2024",
                "status": "active",
                "budget": 1000,
                "spend": 750,
                "impressions": 45000,
                "clicks": 890,
                "ctr": 0.0198
            },
            {
                "id": "campaign_2", 
                "name": "Back to School",
                "status": "paused",
                "budget": 500,
                "spend": 450,
                "impressions": 23000,
                "clicks": 420,
                "ctr": 0.0183
            }
        ]
    }

@app.post("/api/v1/ml/predict/ctr")
async def predict_ctr(data: dict):
    """Mock CTR prediction"""
    predicted_ctr = round(random.uniform(0.01, 0.05), 4)
    return {
        "ctr_prediction": predicted_ctr,
        "confidence": round(random.uniform(0.7, 0.95), 3),
        "model_version": "mock_v1.0"
    }

@app.post("/api/v1/ml/optimize/budget")
async def optimize_budget(data: dict):
    """Mock budget optimization"""
    campaigns = data.get("campaigns", [])
    recommendations = []
    
    for campaign in campaigns:
        new_budget = campaign["current_budget"] * random.uniform(0.8, 1.3)
        recommendations.append({
            "campaign_id": campaign["campaign_id"],
            "current_budget": campaign["current_budget"],
            "recommended_budget": round(new_budget, 2),
            "expected_improvement": round(random.uniform(5, 25), 1)
        })
    
    return {"recommendations": recommendations}

@app.get("/api/v1/analytics/dashboard")
async def get_dashboard():
    """Mock dashboard data"""
    return {
        "total_campaigns": 15,
        "active_campaigns": 8,
        "total_spend": 12500,
        "total_impressions": 890000,
        "avg_ctr": 0.0195,
        "roi": 3.2
    }

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8000)
EOF

# –ó–∞–ø—É—Å–∫ mock backend
echo "üîß –ó–∞–ø—É—Å–∫ Mock Backend API..."

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞—î
if [ ! -d "venv" ]; then
    echo "üì¶ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞..."
    python3 -m venv venv
fi

# –ê–∫—Ç–∏–≤–∞—Ü—ñ—è –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ —Ç–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
source venv/bin/activate
pip install fastapi uvicorn > /dev/null 2>&1

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
nohup python mock_server.py > logs/backend.log 2>&1 &
BACKEND_PID=$!

# –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–∞–ø—É—Å–∫—É backend
sleep 3

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ backend –∑–∞–ø—É—Å—Ç–∏–≤—Å—è
if curl -s http://localhost:8000/health > /dev/null 2>&1; then
    echo "‚úÖ Backend API: http://localhost:8000"
    echo "‚úÖ API Docs: http://localhost:8000/docs"
else
    echo "‚ö†Ô∏è  Backend API: –ó–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è... (–ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ —á–µ—Ä–µ–∑ —Ö–≤–∏–ª–∏–Ω—É)"
fi

echo ""
echo "=========================="
echo "üéâ AI-Buyer –∑–∞–ø—É—â–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ!"
echo ""
echo "üåê –î–æ—Å—Ç—É–ø–Ω—ñ —Å–µ—Ä–≤—ñ—Å–∏:"
echo "   Frontend:    http://localhost:8080"
echo "   Backend API: http://localhost:8000"
echo "   API Docs:    http://localhost:8000/docs"
echo ""
echo "üìù –õ–æ–≥–∏:"
echo "   Frontend: logs/frontend.log"
echo "   Backend:  logs/backend.log"
echo ""
echo "üõë –î–ª—è –∑—É–ø–∏–Ω–∫–∏: ./stop-local.sh"
echo "üìñ –ü–æ–≤–Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è: README.md"

# –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è PID –¥–ª—è –∑—É–ø–∏–Ω–∫–∏
mkdir -p logs
echo $FRONTEND_PID > logs/frontend.pid
echo $BACKEND_PID > logs/backend.pid

echo ""
echo "‚ú® –í—ñ–¥–∫—Ä–∏–π—Ç–µ http://localhost:8080 —É –±—Ä–∞—É–∑–µ—Ä—ñ"