#!/usr/bin/env python3
"""
Facebook XHR Network Requests Monitor
–°–∏–º—É–ª—é—î –∑–∞–ø–∏—Ç–∏, —è–∫—ñ —Ä–æ–±–∏—Ç—å –±—Ä–∞—É–∑–µ—Ä –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ Ads Manager
"""

import json
import sqlite3
import time
import urllib.request
import urllib.parse
import gzip
from http.server import HTTPServer, BaseHTTPRequestHandler
from urllib.parse import urlparse

# CORS headers
CORS_HEADERS = {
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
    'Access-Control-Allow-Headers': 'Content-Type, Authorization'
}

class FacebookXHRExtractor:
    """–ö–ª–∞—Å –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É XHR –∑–∞–ø–∏—Ç—ñ–≤ –¥–æ Facebook"""
    
    def __init__(self, cookies_data, user_agent, facebook_id):
        self.cookies_data = cookies_data
        self.user_agent = user_agent
        self.facebook_id = facebook_id
        
    def get_base_headers(self, additional_headers=None):
        """–ë–∞–∑–æ–≤—ñ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –≤—Å—ñ—Ö –∑–∞–ø–∏—Ç—ñ–≤"""
        headers = {
            'User-Agent': self.user_agent,
            'Cookie': self.cookies_data,
            'Accept': 'application/json, text/plain, */*',
            'Accept-Language': 'en-US,en;q=0.9,uk;q=0.8',
            'Accept-Encoding': 'gzip, deflate, br',
            'Connection': 'keep-alive',
            'Sec-Fetch-Dest': 'empty',
            'Sec-Fetch-Mode': 'cors',
            'Sec-Fetch-Site': 'same-origin',
            'X-Requested-With': 'XMLHttpRequest',
            'Referer': 'https://www.facebook.com/adsmanager/',
            'Origin': 'https://www.facebook.com'
        }
        
        if additional_headers:
            headers.update(additional_headers)
            
        return headers
    
    def make_request(self, url, headers=None, method='GET', data=None, timeout=15):
        """–£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è HTTP –∑–∞–ø–∏—Ç—ñ–≤"""
        try:
            print(f"üì° –ó–∞–ø–∏—Ç –¥–æ: {url[:80]}...")
            
            if headers is None:
                headers = self.get_base_headers()
            
            request = urllib.request.Request(url, headers=headers, method=method)
            
            if data and method == 'POST':
                if isinstance(data, dict):
                    data = urllib.parse.urlencode(data).encode()
                request.data = data
            
            with urllib.request.urlopen(request, timeout=timeout) as response:
                content = response.read()
                
                # –†–æ–∑–ø–∞–∫–æ–≤—É—î–º–æ gzip —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
                if response.headers.get('Content-Encoding') == 'gzip':
                    content = gzip.decompress(content)
                
                # –î–µ–∫–æ–¥—É—î–º–æ –∑ —Ä—ñ–∑–Ω–∏–º–∏ –∫–æ–¥—É–≤–∞–Ω–Ω—è–º–∏
                try:
                    text = content.decode('utf-8')
                except UnicodeDecodeError:
                    try:
                        text = content.decode('latin-1')
                    except UnicodeDecodeError:
                        text = content.decode('utf-8', errors='ignore')
                
                return {
                    'status': response.status,
                    'headers': dict(response.headers),
                    'content': text,
                    'length': len(text)
                }
                
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É –¥–æ {url}: {e}")
            return None
    
    def monitor_network_requests(self):
        """–ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –º–µ—Ä–µ–∂–µ–≤–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤ —è–∫ –≤ –±—Ä–∞—É–∑–µ—Ä—ñ"""
        print("üîç –ú–æ–Ω—ñ—Ç–æ—Ä–∏–º–æ –º–µ—Ä–µ–∂–µ–≤—ñ –∑–∞–ø–∏—Ç–∏...")
        
        # –°–ø–∏—Å–æ–∫ URL —è–∫—ñ –±—Ä–∞—É–∑–µ—Ä –∑–∞–∑–≤–∏—á–∞–π –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î
        network_requests = [
            # GraphQL API endpoints
            'https://www.facebook.com/api/graphql/',
            
            # AJAX endpoints  
            'https://www.facebook.com/ajax/bulk',
            'https://www.facebook.com/ajax/pagelet/generic.php/PageletAdsManagerRoot',
            
            # Ads Manager specific
            'https://www.facebook.com/adsmanager/manage/campaigns',
            'https://www.facebook.com/adsmanager/manage/campaigns/insights',
            'https://www.facebook.com/adsmanager/manage/adaccounts',
            
            # Business Manager
            'https://business.facebook.com/adsmanager/',
            'https://business.facebook.com/ajax/adsmanager/ad_accounts',
            
            # Tracking and events
            'https://www.facebook.com/tr/events/',
            'https://www.facebook.com/ajax/navigation/',
            
            # Internal APIs
            'https://www.facebook.com/adspayments/account_settings',
            'https://graph.facebook.com/me/adaccounts'
        ]
        
        results = []
        ad_account_data = []
        
        for url in network_requests:
            print(f"\nüéØ –¢–µ—Å—Ç—É—î–º–æ: {url}")
            
            # –°–ø–æ—á–∞—Ç–∫—É GET –∑–∞–ø–∏—Ç
            response = self.make_request(url)
            
            if response:
                data = response['content']
                status = response['status']
                
                print(f"   Status: {status}, Length: {response['length']}")
                
                # –®—É–∫–∞—î–º–æ –¥–∞–Ω—ñ –ø—Ä–æ —Ä–µ–∫–ª–∞–º–Ω—ñ –∫–∞–±—ñ–Ω–µ—Ç–∏
                ad_account_patterns = [
                    'adAccount',
                    'account_id', 
                    'act_',
                    'campaign',
                    'impressions',
                    'spend',
                    'adset',
                    'creative'
                ]
                
                found_patterns = []
                for pattern in ad_account_patterns:
                    if pattern in data:
                        found_patterns.append(pattern)
                
                if found_patterns:
                    print(f"   ‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –ø–∞—Ç–µ—Ä–Ω–∏: {', '.join(found_patterns)}")
                    
                    # –°–ø—Ä–æ–±—É—î–º–æ –≤–∏—Ç—è–≥–Ω—É—Ç–∏ JSON –¥–∞–Ω—ñ
                    extracted_data = self.extract_ad_data_from_response(data, url)
                    if extracted_data:
                        ad_account_data.extend(extracted_data)
                    
                    results.append({
                        'url': url,
                        'status': status,
                        'patterns_found': found_patterns,
                        'data_preview': data[:500] + '...' if len(data) > 500 else data,
                        'extracted_accounts': len(extracted_data) if extracted_data else 0
                    })
                else:
                    print(f"   ‚ùå –†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ñ –¥–∞–Ω—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            
            # –ù–µ–≤–µ–ª–∏–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏
            time.sleep(1)
        
        return {
            'requests_results': results,
            'ad_accounts': ad_account_data,
            'total_accounts_found': len(ad_account_data)
        }
    
    def extract_ad_data_from_response(self, data, url):
        """–í–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ —Ä–µ–∫–ª–∞–º–Ω—ñ –∫–∞–±—ñ–Ω–µ—Ç–∏ –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ"""
        import re
        
        accounts = []
        
        try:
            # –°–ø—Ä–æ–±—É—î–º–æ –ø–∞—Ä—Å–∏–Ω–≥ —è–∫ JSON
            if data.strip().startswith('{') or data.strip().startswith('['):
                try:
                    json_data = json.loads(data)
                    accounts.extend(self.parse_json_for_accounts(json_data, url))
                except json.JSONDecodeError:
                    pass
            
            # Regex –ø–∞—Ç–µ—Ä–Ω–∏ –¥–ª—è –ø–æ—à—É–∫—É ID —Ä–µ–∫–ª–∞–º–Ω–∏—Ö –∫–∞–±—ñ–Ω–µ—Ç—ñ–≤
            patterns = [
                r'"adAccountID":"(\d+)"',
                r'"account_id":"(\d+)"',
                r'act_(\d+)',
                r'"id":"act_(\d+)"',
                r'"ad_account_id":"(\d+)"',
                r'account_id=(\d+)',
                r'adaccount_id=(\d+)'
            ]
            
            account_ids = set()
            
            for pattern in patterns:
                matches = re.findall(pattern, data)
                for match in matches:
                    if isinstance(match, tuple):
                        account_id = match[0] if match[0] else match[1]
                    else:
                        account_id = match
                    
                    if account_id and account_id.isdigit():
                        account_ids.add(account_id)
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –æ–±'—î–∫—Ç–∏ –∞–∫–∞—É–Ω—Ç—ñ–≤
            for account_id in account_ids:
                accounts.append({
                    'id': f'act_{account_id}',
                    'account_id': account_id,
                    'name': f'Account {account_id}',
                    'source': f'xhr_monitoring_{url.split("/")[-1]}',
                    'extracted_from': url
                })
            
            if accounts:
                print(f"   üìä –í–∏—Ç—è–≥–Ω—É—Ç–æ {len(accounts)} –∫–∞–±—ñ–Ω–µ—Ç—ñ–≤ –∑ {url}")
            
        except Exception as e:
            print(f"   ‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è –∑ {url}: {e}")
        
        return accounts
    
    def parse_json_for_accounts(self, json_data, url):
        """–ü–∞—Ä—Å–∏–Ω–≥ JSON –¥–∞–Ω–∏—Ö –¥–ª—è –ø–æ—à—É–∫—É —Ä–µ–∫–ª–∞–º–Ω–∏—Ö –∫–∞–±—ñ–Ω–µ—Ç—ñ–≤"""
        accounts = []
        
        def recursive_search(obj, path=""):
            if isinstance(obj, dict):
                # –®—É–∫–∞—î–º–æ –∫–ª—é—á—ñ —â–æ –≤–∫–∞–∑—É—é—Ç—å –Ω–∞ —Ä–µ–∫–ª–∞–º–Ω—ñ –∫–∞–±—ñ–Ω–µ—Ç–∏
                if 'adaccounts' in obj or 'ad_accounts' in obj:
                    account_list = obj.get('adaccounts') or obj.get('ad_accounts')
                    if isinstance(account_list, list):
                        for acc in account_list:
                            if isinstance(acc, dict) and 'id' in acc:
                                accounts.append({
                                    'id': acc['id'],
                                    'account_id': acc['id'].replace('act_', ''),
                                    'name': acc.get('name', f'Account {acc["id"]}'),
                                    'status': acc.get('account_status'),
                                    'currency': acc.get('currency'),
                                    'source': f'json_parsing_{url.split("/")[-1]}',
                                    'extracted_from': url
                                })
                
                # –†–µ–∫—É—Ä—Å–∏–≤–Ω–∏–π –ø–æ—à—É–∫ –≤ —É—Å—ñ—Ö –ø–æ–ª—è—Ö
                for key, value in obj.items():
                    if isinstance(value, (dict, list)):
                        recursive_search(value, f"{path}.{key}")
                        
            elif isinstance(obj, list):
                for i, item in enumerate(obj):
                    if isinstance(item, (dict, list)):
                        recursive_search(item, f"{path}[{i}]")
        
        try:
            recursive_search(json_data)
        except Exception as e:
            print(f"   ‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ JSON –ø–∞—Ä—Å–∏–Ω–≥—É: {e}")
        
        return accounts
    
    def try_post_requests(self):
        """–°–ø—Ä–æ–±—É—î–º–æ POST –∑–∞–ø–∏—Ç–∏ –∑ –¥–æ–¥–∞—Ç–∫–æ–≤–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
        print("\nüîÑ –¢–µ—Å—Ç—É—î–º–æ POST –∑–∞–ø–∏—Ç–∏...")
        
        post_endpoints = [
            {
                'url': 'https://www.facebook.com/api/graphql/',
                'data': {
                    'fb_dtsg': 'placeholder',  # –ë—É–¥–µ –æ–Ω–æ–≤–ª–µ–Ω–æ
                    'variables': '{}',
                    'doc_id': '2140584719566580'  # ID –¥–ª—è ad accounts –∑–∞–ø–∏—Ç—É
                }
            },
            {
                'url': 'https://www.facebook.com/ajax/bulk',
                'data': {
                    'fb_dtsg': 'placeholder',
                    '__a': '1',
                    '__req': '1',
                    '__be': '1',
                    '__pc': 'PHASED:DEFAULT'
                }
            }
        ]
        
        results = []
        
        for endpoint in post_endpoints:
            print(f"üì° POST –¥–æ: {endpoint['url']}")
            
            headers = self.get_base_headers({
                'Content-Type': 'application/x-www-form-urlencoded'
            })
            
            response = self.make_request(
                endpoint['url'], 
                headers=headers, 
                method='POST', 
                data=endpoint['data']
            )
            
            if response:
                print(f"   Status: {response['status']}, Length: {response['length']}")
                
                if response['content'] and ('adAccount' in response['content'] or 'act_' in response['content']):
                    print("   ‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ñ –¥–∞–Ω—ñ –≤ POST –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ")
                    results.append({
                        'url': endpoint['url'],
                        'method': 'POST',
                        'status': response['status'],
                        'has_ad_data': True,
                        'preview': response['content'][:300]
                    })
            
            time.sleep(1)
        
        return results


class XHRMonitoringHandler(BaseHTTPRequestHandler):
    """HTTP Request Handler –¥–ª—è XHR Monitoring backend"""
    
    def do_OPTIONS(self):
        self.send_response(200)
        for key, value in CORS_HEADERS.items():
            self.send_header(key, value)
        self.end_headers()
    
    def do_GET(self):
        """Handle GET requests"""
        parsed_path = urlparse(self.path)
        path_parts = parsed_path.path.strip('/').split('/')
        
        if parsed_path.path == '/' or parsed_path.path == '':
            self.handle_root()
        elif path_parts == ['api', 'facebook', 'accounts']:
            self.handle_get_facebook_accounts()
        elif (len(path_parts) == 5 and path_parts[:3] == ['api', 'facebook', 'accounts'] 
              and path_parts[4] == 'adaccounts'):
            account_id = path_parts[3]
            self.handle_xhr_monitoring(account_id)
        else:
            self.send_404()
    
    def handle_root(self):
        """–ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ API"""
        self.send_response(200)
        for key, value in CORS_HEADERS.items():
            self.send_header(key, value)
        self.send_header('Content-Type', 'application/json')
        self.end_headers()
        
        response = {
            'service': 'Facebook XHR Network Monitoring Backend',
            'version': '1.0',
            'description': '–ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ XHR –∑–∞–ø–∏—Ç—ñ–≤ –¥–ª—è –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è Facebook —Ä–µ–∫–ª–∞–º–Ω–∏—Ö –∫–∞–±—ñ–Ω–µ—Ç—ñ–≤',
            'methods': ['GET Requests Simulation', 'POST Requests Simulation', 'JSON Data Extraction'],
            'endpoints': {
                'GET /': '–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ API',
                'GET /api/facebook/accounts': '–°–ø–∏—Å–æ–∫ Facebook –∞–∫–∞—É–Ω—Ç—ñ–≤',
                'GET /api/facebook/accounts/{id}/adaccounts': 'XHR –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —Ä–µ–∫–ª–∞–º–Ω–∏—Ö –∫–∞–±—ñ–Ω–µ—Ç—ñ–≤'
            },
            'status': 'active'
        }
        self.wfile.write(json.dumps(response, ensure_ascii=False, indent=2).encode('utf-8'))
    
    def handle_get_facebook_accounts(self):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É Facebook –∞–∫–∞—É–Ω—Ç—ñ–≤ –∑ –±–∞–∑–∏"""
        try:
            conn = sqlite3.connect('ai_buyer.db')
            cursor = conn.cursor()
            
            cursor.execute("""
                SELECT id, facebook_id, name, access_token, cookies_data, user_agent, created_at 
                FROM facebook_accounts 
                ORDER BY created_at DESC
            """)
            
            accounts = []
            for row in cursor.fetchall():
                accounts.append({
                    'id': row[0],
                    'facebook_id': row[1],
                    'name': row[2],
                    'access_token': row[3][:20] + '...' if row[3] else None,
                    'has_cookies': bool(row[4]),
                    'has_user_agent': bool(row[5]),
                    'cookies_length': len(row[4]) if row[4] else 0,
                    'created_at': row[6]
                })
            
            conn.close()
            
            self.send_response(200)
            for key, value in CORS_HEADERS.items():
                self.send_header(key, value)
            self.send_header('Content-Type', 'application/json')
            self.end_headers()
            
            response = {
                'status': 'success',
                'data': accounts,
                'count': len(accounts)
            }
            
            self.wfile.write(json.dumps(response, ensure_ascii=False).encode('utf-8'))
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–∫–∞—É–Ω—Ç—ñ–≤: {e}")
            self.send_error_response(500, f"Database error: {str(e)}")
    
    def handle_xhr_monitoring(self, account_id):
        """XHR –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–∫–ª–∞–º–Ω–∏—Ö –∫–∞–±—ñ–Ω–µ—Ç—ñ–≤"""
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∞–∫–∞—É–Ω—Ç–∞ –∑ –±–∞–∑–∏
            conn = sqlite3.connect('ai_buyer.db')
            cursor = conn.cursor()
            
            cursor.execute("""
                SELECT facebook_id, name, access_token, cookies_data, user_agent 
                FROM facebook_accounts 
                WHERE id = ?
            """, (account_id,))
            
            account_data = cursor.fetchone()
            conn.close()
            
            if not account_data:
                self.send_error_response(404, 'Facebook –∞–∫–∞—É–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π')
                return
            
            facebook_id, name, access_token, cookies_data, user_agent = account_data
            
            print(f"üîç XHR –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è –∞–∫–∞—É–Ω—Ç–∞ {account_id}")
            print(f"   FB ID: {facebook_id}")
            print(f"   Name: {name}")
            print(f"   Cookies: {'–Ñ' if cookies_data else '–í—ñ–¥—Å—É—Ç–Ω—ñ'} ({len(cookies_data) if cookies_data else 0} —Å–∏–º–≤–æ–ª—ñ–≤)")
            print(f"   User Agent: {'–Ñ' if user_agent else '–í—ñ–¥—Å—É—Ç–Ω—ñ–π'}")
            
            if not cookies_data:
                self.send_error_response(400, 'Cookies –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ –¥–ª—è XHR –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É')
                return
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –µ–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä —ñ –ø—Ä–æ–≤–æ–¥–∏–º–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥
            extractor = FacebookXHRExtractor(
                cookies_data=cookies_data,
                user_agent=user_agent,
                facebook_id=facebook_id
            )
            
            # –ú–æ–Ω—ñ—Ç–æ—Ä–∏–º–æ –º–µ—Ä–µ–∂–µ–≤—ñ –∑–∞–ø–∏—Ç–∏
            monitoring_results = extractor.monitor_network_requests()
            
            # –ü—Ä–æ–±—É—î–º–æ POST –∑–∞–ø–∏—Ç–∏
            post_results = extractor.try_post_requests()
            
            total_accounts = monitoring_results.get('total_accounts_found', 0)
            requests_tested = len(monitoring_results.get('requests_results', []))
            
            print(f"‚úÖ XHR –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ:")
            print(f"   –¢–µ—Å—Ç–æ–≤–∞–Ω–æ –∑–∞–ø–∏—Ç—ñ–≤: {requests_tested}")
            print(f"   –ó–Ω–∞–π–¥–µ–Ω–æ –∫–∞–±—ñ–Ω–µ—Ç—ñ–≤: {total_accounts}")
            
            self.send_response(200)
            for key, value in CORS_HEADERS.items():
                self.send_header(key, value)
            self.send_header('Content-Type', 'application/json')
            self.end_headers()
            
            response = {
                'status': 'success',
                'account_id': account_id,
                'facebook_id': facebook_id,
                'method': 'xhr_monitoring',
                'requests_tested': requests_tested,
                'total_accounts_found': total_accounts,
                'monitoring_results': monitoring_results,
                'post_results': post_results
            }
            
            self.wfile.write(json.dumps(response, ensure_ascii=False).encode('utf-8'))
                
        except Exception as e:
            print(f"üö´ –ü–æ–º–∏–ª–∫–∞ XHR –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É: {e}")
            self.send_error_response(500, f'XHR monitoring error: {str(e)}')
    
    def send_404(self):
        """–í—ñ–¥–ø—Ä–∞–≤–∫–∞ 404 –ø–æ–º–∏–ª–∫–∏"""
        self.send_response(404)
        for key, value in CORS_HEADERS.items():
            self.send_header(key, value)
        self.send_header('Content-Type', 'application/json')
        self.end_headers()
        
        response = {'status': 'error', 'detail': 'Endpoint not found'}
        self.wfile.write(json.dumps(response).encode())
    
    def send_error_response(self, status_code, message):
        """–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–º–∏–ª–∫–∏"""
        self.send_response(status_code)
        for key, value in CORS_HEADERS.items():
            self.send_header(key, value)
        self.send_header('Content-Type', 'application/json')
        self.end_headers()
        
        response = {'status': 'error', 'detail': message}
        self.wfile.write(json.dumps(response, ensure_ascii=False).encode('utf-8'))


def main():
    server_address = ('localhost', 8002)  # –ù–æ–≤–∏–π –ø–æ—Ä—Ç –¥–ª—è XHR –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
    httpd = HTTPServer(server_address, XHRMonitoringHandler)
    
    print("üîç Facebook XHR Network Monitoring Backend –∑–∞–ø—É—â–µ–Ω–∏–π –Ω–∞ http://localhost:8002")
    print("üì° –ú–µ—Ç–æ–¥–∏ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É:")
    print("   üéØ GET Requests - —Å–∏–º—É–ª—è—Ü—ñ—è –±—Ä–∞—É–∑–µ—Ä–Ω–∏—Ö GET –∑–∞–ø–∏—Ç—ñ–≤")
    print("   üì§ POST Requests - —Å–∏–º—É–ª—è—Ü—ñ—è AJAX/GraphQL –∑–∞–ø–∏—Ç—ñ–≤")
    print("   üîç JSON Extraction - –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ JSON –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π")
    print("   üìä Pattern Matching - –ø–æ—à—É–∫ –ø–æ regex –ø–∞—Ç–µ—Ä–Ω–∞—Ö")
    print("üìã API endpoints:")
    print("   GET /                                      - –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ API")
    print("   GET /api/facebook/accounts                 - –°–ø–∏—Å–æ–∫ –∞–∫–∞—É–Ω—Ç—ñ–≤")
    print("   GET /api/facebook/accounts/{id}/adaccounts - XHR –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∫–∞–±—ñ–Ω–µ—Ç—ñ–≤")
    print("‚úÖ –ì–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏!")
    
    try:
        httpd.serve_forever()
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –°–µ—Ä–≤–µ—Ä –∑—É–ø–∏–Ω–µ–Ω–∏–π")
        httpd.shutdown()


if __name__ == '__main__':
    main()