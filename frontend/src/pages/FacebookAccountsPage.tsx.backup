import { useState } from 'react';import { useState } from 'react';import { useState, useEffect } from 'react';

import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';

import { Button } from '@/components/ui/button';import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';

import { Input } from '@/components/ui/input';

import { Label } from '@/components/ui/label';import { Button } from '@/components/ui/button';import { Button } from '@/components/ui/button';

import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';

import { Badge } from '@/components/ui/badge';import { Input } from '@/components/ui/input';import { Input } from '@/components/ui/input';

import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';

import { Plus, Search } from 'lucide-react';import { Label } from '@/components/ui/label';import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue                        <div className="font-medium">{account.name} ({account.facebook_id})</div>

import { useFacebookAccounts } from '@/hooks/useFacebookApi';

import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';                        {account.cookies_loaded && (

export default function FacebookAccountsPage() {

  const [searchTerm, setSearchTerm] = useState('');import { Badge } from '@/components/ui/badge';                          <Badge variant="secondary" className="text-xs">Cookie</Badge>

  const [showAddModal, setShowAddModal] = useState(false);

  const { accounts, loading, error } = useFacebookAccounts();import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';                        )}



  const getStatusBadge = (status: string) => {import { Plus, Search } from 'lucide-react';                        <div className="text-sm text-muted-foreground">

    switch (status) {

      case 'active':import { useFacebookAccounts } from '@/hooks/useFacebookApi';                          Основной кабинет: <strong>{account.primary_cabinet}</strong>

        return <Badge variant="default" className="bg-green-500">Активен</Badge>;

      case 'inactive':                        </div>

        return <Badge variant="secondary">Неактивен</Badge>;

      case 'banned':export default function FacebookAccountsPage() {                        <div className="text-xs text-muted-foreground">

        return <Badge variant="destructive">Заблоковано</Badge>;

      default:  const [searchTerm, setSearchTerm] = useState('');                          <strong>({account.primary_cabinet_id})</strong>{' '}

        return <Badge variant="outline">{status}</Badge>;

    }  const [showAddModal, setShowAddModal] = useState(false);                          <Button variant="link" size="sm" className="h-auto p-0 text-xs">

  };

  const { accounts, loading, error } = useFacebookAccounts();                            Все кабинеты ({account.total_cabinets})

  const filteredAccounts = accounts.filter(account => 

    account.name.toLowerCase().includes(searchTerm.toLowerCase()) ||                          </Button>

    account.facebook_id.includes(searchTerm)

  );  const getStatusBadge = (status: string) => {                        </div>mponents/ui/select';



  if (loading) return <div>Загрузка...</div>;    switch (status) {import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';

  if (error) return <div>Ошибка: {error}</div>;

      case 'active':import { Badge } from '@/components/ui/badge';

  return (

    <div className="space-y-6">        return <Badge variant="default" className="bg-green-500">Активен</Badge>;import { Checkbox } from '@/components/ui/checkbox';

      <Card>

        <CardHeader>      case 'inactive':import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';

          <CardTitle>Facebook аккаунты</CardTitle>

        </CardHeader>        return <Badge variant="secondary">Неактивен</Badge>;import { Label } from '@/components/ui/label';

        <CardContent>

          <div className="flex flex-col gap-4 sm:flex-row sm:items-center sm:justify-between">      case 'banned':import { Textarea } from '@/components/ui/textarea';

            <div className="flex-1">

              <Label htmlFor="search">Поиск</Label>        return <Badge variant="destructive">Заблоковано</Badge>;import { Switch } from '@/components/ui/switch';

              <div className="relative">

                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" />      default:import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from '@/components/ui/dropdown-menu';

                <Input

                  id="search"        return <Badge variant="outline">{status}</Badge>;import { Plus, Search, Edit, Trash2, Settings, BarChart3, Users, MessageSquare, MoreVertical } from 'lucide-react';

                  placeholder="Поиск аккаунтов..."

                  value={searchTerm}    }import { useTranslations } from '@/lib/translations';

                  onChange={(e) => setSearchTerm(e.target.value)}

                  className="pl-10"  };

                />

              </div>const API_BASE_URL = 'http://localhost:8001/api';

            </div>

            <Dialog open={showAddModal} onOpenChange={setShowAddModal}>  const filteredAccounts = accounts.filter(account => 

              <DialogTrigger asChild>

                <Button>    account.name.toLowerCase().includes(searchTerm.toLowerCase()) ||interface FacebookAccount {

                  <Plus className="h-4 w-4 mr-2" />

                  Добавить аккаунт    account.facebook_id.includes(searchTerm)  id: number;

                </Button>

              </DialogTrigger>  );  name: string;

              <DialogContent>

                <DialogHeader>  facebook_id: string;

                  <DialogTitle>Новый аккаунт</DialogTitle>

                </DialogHeader>  if (loading) return <div>Загрузка...</div>;  group_name?: string;

                <div className="text-center p-4">

                  <p>Используйте страницу <strong>/accounts/add</strong> для добавления аккаунтов через браузерное расширение</p>  if (error) return <div>Ошибка: {error}</div>;  status: 'active' | 'inactive' | 'banned';

                  <Button 

                    onClick={() => window.open('/accounts/add', '_blank')}   token_status: 'active' | 'expired' | 'invalid';

                    className="mt-4"

                  >  return (  balance?: string;

                    Открыть страницу добавления

                  </Button>    <div className="space-y-6">  daily_limit?: string;

                </div>

              </DialogContent>      {/* Header and Controls */}  cookies_loaded: boolean;

            </Dialog>

          </div>      <Card>  primary_cabinet?: string;

        </CardContent>

      </Card>        <CardHeader>  primary_cabinet_id?: string;



      <Card>          <CardTitle>Facebook аккаунты</CardTitle>  total_cabinets: number;

        <CardHeader>

          <CardTitle>Список аккаунтов ({filteredAccounts.length})</CardTitle>        </CardHeader>  created_at: string;

        </CardHeader>

        <CardContent>        <CardContent>  updated_at: string;

          <Table>

            <TableHeader>          <div className="flex flex-col gap-4 sm:flex-row sm:items-center sm:justify-between">}

              <TableRow>

                <TableHead>Имя</TableHead>            <div className="flex-1">

                <TableHead>Facebook ID</TableHead>

                <TableHead>Группа</TableHead>              <Label htmlFor="search">Поиск</Label>export default function FacebookAccountsPage() {

                <TableHead>Статус</TableHead>

                <TableHead>Токен</TableHead>              <div className="relative">  const t = useTranslations();

                <TableHead>Баланс</TableHead>

                <TableHead>Кабинеты</TableHead>                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" />  const [searchTerm, setSearchTerm] = useState('');

              </TableRow>

            </TableHeader>                <Input  const [selectedGroup, setSelectedGroup] = useState('all');

            <TableBody>

              {filteredAccounts.map((account) => (                  id="search"  const [selectedAccounts, setSelectedAccounts] = useState<number[]>([]);

                <TableRow key={account.id}>

                  <TableCell>                  placeholder="Поиск аккаунтов..."  const [showAddModal, setShowAddModal] = useState(false);

                    <div className="font-medium">{account.name}</div>

                    {account.cookies_loaded && (                  value={searchTerm}  const [accounts, setAccounts] = useState<FacebookAccount[]>([]);

                      <Badge variant="secondary" className="text-xs mt-1">Cookie</Badge>

                    )}                  onChange={(e) => setSearchTerm(e.target.value)}  const [loading, setLoading] = useState(true);

                  </TableCell>

                  <TableCell className="font-mono text-sm">{account.facebook_id}</TableCell>                  className="pl-10"  const [error, setError] = useState<string | null>(null);

                  <TableCell>{account.group_name || '—'}</TableCell>

                  <TableCell>{getStatusBadge(account.status)}</TableCell>                />

                  <TableCell>{getStatusBadge(account.token_status)}</TableCell>

                  <TableCell>              </div>  // Fetch accounts from API

                    {account.balance ? (

                      <div className="text-sm">            </div>  useEffect(() => {

                        <div><strong>Баланс:</strong> {account.balance}</div>

                        {account.daily_limit && (            <Dialog open={showAddModal} onOpenChange={setShowAddModal}>    const fetchAccounts = async () => {

                          <div className="text-muted-foreground">Лимит: {account.daily_limit}</div>

                        )}              <DialogTrigger asChild>      try {

                      </div>

                    ) : '—'}                <Button>        setLoading(true);

                  </TableCell>

                  <TableCell>                  <Plus className="h-4 w-4 mr-2" />        setError(null);

                    <div className="text-sm">

                      <div><strong>Основной:</strong> {account.primary_cabinet || '—'}</div>                  Добавить аккаунт        

                      <div className="text-muted-foreground">Всего: {account.total_cabinets}</div>

                    </div>                </Button>        const params = new URLSearchParams();

                  </TableCell>

                </TableRow>              </DialogTrigger>        if (selectedGroup && selectedGroup !== 'all') {

              ))}

            </TableBody>              <DialogContent>          params.append('group_name', selectedGroup);

          </Table>

                          <DialogHeader>        }

          {filteredAccounts.length === 0 && (

            <div className="text-center py-8 text-muted-foreground">                  <DialogTitle>Новый аккаунт</DialogTitle>        

              {searchTerm ? 'Аккаунты не найдены' : 'Нет аккаунтов'}

            </div>                </DialogHeader>        const response = await fetch(`${API_BASE_URL}/facebook/accounts?${params}`);

          )}

        </CardContent>                <div className="text-center p-4">        

      </Card>

    </div>                  <p>Используйте страницу <strong>/accounts/add</strong> для добавления аккаунтов через браузерное расширение</p>        if (!response.ok) {

  );

}                  <Button           throw new Error(`Failed to fetch accounts: ${response.statusText}`);

                    onClick={() => window.open('/accounts/add', '_blank')}         }

                    className="mt-4"        

                  >        const data = await response.json();

                    Открыть страницу добавления        setAccounts(data);

                  </Button>      } catch (err) {

                </div>        setError(err instanceof Error ? err.message : 'Failed to fetch accounts');

              </DialogContent>      } finally {

            </Dialog>        setLoading(false);

          </div>      }

        </CardContent>    };

      </Card>

    fetchAccounts();

      {/* Accounts Table */}  }, [selectedGroup]);

      <Card>

        <CardHeader>  const handleSelectAll = (checked: boolean) => {

          <CardTitle>Список аккаунтов ({filteredAccounts.length})</CardTitle>    if (checked) {

        </CardHeader>      setSelectedAccounts(accounts.map(acc => acc.id));

        <CardContent>    } else {

          <Table>      setSelectedAccounts([]);

            <TableHeader>    }

              <TableRow>  };

                <TableHead>Имя</TableHead>

                <TableHead>Facebook ID</TableHead>  const handleSelectAccount = (accountId: number, checked: boolean) => {

                <TableHead>Группа</TableHead>    if (checked) {

                <TableHead>Статус</TableHead>      setSelectedAccounts([...selectedAccounts, accountId]);

                <TableHead>Токен</TableHead>    } else {

                <TableHead>Баланс</TableHead>      setSelectedAccounts(selectedAccounts.filter(id => id !== accountId));

                <TableHead>Кабинеты</TableHead>    }

              </TableRow>  };

            </TableHeader>

            <TableBody>  const getStatusBadge = (status: string) => {

              {filteredAccounts.map((account) => (    switch (status) {

                <TableRow key={account.id}>      case 'active':

                  <TableCell>        return <Badge variant="default" className="bg-green-500">Активен</Badge>;

                    <div className="font-medium">{account.name}</div>      case 'inactive':

                    {account.cookies_loaded && (        return <Badge variant="secondary">Неактивен</Badge>;

                      <Badge variant="secondary" className="text-xs mt-1">Cookie</Badge>      case 'banned':

                    )}        return <Badge variant="destructive">Заблоковано</Badge>;

                  </TableCell>      default:

                  <TableCell className="font-mono text-sm">{account.facebook_id}</TableCell>        return <Badge variant="outline">{status}</Badge>;

                  <TableCell>{account.group_name || '—'}</TableCell>    }

                  <TableCell>{getStatusBadge(account.status)}</TableCell>  };

                  <TableCell>{getStatusBadge(account.token_status)}</TableCell>

                  <TableCell>  return (

                    {account.balance ? (    <div className="space-y-6">

                      <div className="text-sm">      {/* Header */}

                        <div><strong>Баланс:</strong> {account.balance}</div>      <div className="flex items-center justify-between">

                        {account.daily_limit && (        <div>

                          <div className="text-muted-foreground">Лимит: {account.daily_limit}</div>          <h1 className="text-3xl font-bold">Аккаунти Facebook</h1>

                        )}          <p className="text-muted-foreground">Управління Facebook аккаунтами</p>

                      </div>        </div>

                    ) : '—'}      </div>

                  </TableCell>

                  <TableCell>      {/* Filters */}

                    <div className="text-sm">      <Card>

                      <div><strong>Основной:</strong> {account.primary_cabinet || '—'}</div>        <CardContent className="pt-6">

                      <div className="text-muted-foreground">Всего: {account.total_cabinets}</div>          <div className="flex flex-col md:flex-row gap-4 items-end">

                    </div>            <div className="flex-1">

                  </TableCell>              <Label htmlFor="group-filter">Група</Label>

                </TableRow>              <Select value={selectedGroup} onValueChange={setSelectedGroup}>

              ))}                <SelectTrigger id="group-filter">

            </TableBody>                  <SelectValue />

          </Table>                </SelectTrigger>

                          <SelectContent>

          {filteredAccounts.length === 0 && (                  <SelectItem value="all">Все</SelectItem>

            <div className="text-center py-8 text-muted-foreground">                  <SelectItem value="no">Без группы</SelectItem>

              {searchTerm ? 'Аккаунты не найдены' : 'Нет аккаунтов'}                </SelectContent>

            </div>              </Select>

          )}            </div>

        </CardContent>            <div className="flex-1">

      </Card>              <Label htmlFor="search">Пошук</Label>

    </div>              <div className="relative">

  );                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" />

}                <Input
                  id="search"
                  placeholder="Пошук аккаунтів..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="pl-10"
                />
              </div>
            </div>
            <Dialog open={showAddModal} onOpenChange={setShowAddModal}>
              <DialogTrigger asChild>
                <Button>
                  <Plus className="h-4 w-4 mr-2" />
                  Додати аккаунт
                </Button>
              </DialogTrigger>
              <DialogContent className="max-w-2xl max-h-[80vh] overflow-y-auto">
                <DialogHeader>
                  <DialogTitle>Новий аккаунт</DialogTitle>
                </DialogHeader>
                <div className="grid gap-4">
                  <div className="grid gap-2">
                    <Label htmlFor="account-name">Название</Label>
                    <Input id="account-name" placeholder="Техническое название" />
                  </div>
                  <div className="grid gap-2">
                    <Label htmlFor="token">Токен</Label>
                    <Input id="token" placeholder="Токен аккаунта" />
                  </div>
                  <div className="grid gap-2">
                    <Label htmlFor="useragent">UserAgent</Label>
                    <Input id="useragent" />
                  </div>
                  <div className="grid gap-2">
                    <Label htmlFor="proxy">Прокси</Label>
                    <Select>
                      <SelectTrigger>
                        <SelectValue placeholder="Выберите прокси" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="new">Новый прокси</SelectItem>
                        <SelectItem value="existing">Существующий прокси</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  <div className="grid gap-2">
                    <Label htmlFor="group">Группа</Label>
                    <Select>
                      <SelectTrigger>
                        <SelectValue placeholder="Выберите группу" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="no">Без группы</SelectItem>
                        <SelectItem value="new">Новая группа</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  <div className="grid gap-2">
                    <Label htmlFor="cookies">Cookie</Label>
                    <Textarea id="cookies" placeholder="Cookie в формате JSON" />
                  </div>
                  
                  {/* Auto-clean comments */}
                  <div className="space-y-4 border-t pt-4">
                    <div className="flex items-center space-x-2">
                      <Switch id="comments-status" />
                      <Label htmlFor="comments-status">Авточистка комментариев</Label>
                    </div>
                  </div>
                  
                  {/* Notifications */}
                  <div className="space-y-4 border-t pt-4">
                    <h4 className="font-medium">Настройки уведомлений</h4>
                    <div className="grid gap-2">
                      <div className="flex items-center space-x-2">
                        <Switch id="billing-ntf" />
                        <Label htmlFor="billing-ntf">Уведомления о биллингах</Label>
                      </div>
                      <div className="flex items-center space-x-2">
                        <Switch id="moderation-ntf" />
                        <Label htmlFor="moderation-ntf">Уведомления о модерации</Label>
                      </div>
                      <div className="flex items-center space-x-2">
                        <Switch id="status-ntf" defaultChecked />
                        <Label htmlFor="status-ntf">Уведомления о статусе кабинета</Label>
                      </div>
                    </div>
                  </div>
                  
                  <div className="flex gap-2 pt-4">
                    <Button className="flex-1">Добавить</Button>
                    <Button variant="outline" onClick={() => setShowAddModal(false)}>Закрыть</Button>
                  </div>
                </div>
              </DialogContent>
            </Dialog>
          </div>
        </CardContent>
      </Card>

      {/* Accounts Table */}
      <Card>
        <CardHeader>
          <CardTitle>Список аккаунтів</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="rounded-md border">
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead className="w-12">
                    <Checkbox
                      checked={selectedAccounts.length === accounts.length}
                      onCheckedChange={handleSelectAll}
                    />
                  </TableHead>
                  <TableHead>ID</TableHead>
                  <TableHead>Аккаунт</TableHead>
                  <TableHead>Группа</TableHead>
                  <TableHead>Финансы</TableHead>
                  <TableHead>Статус кабинета</TableHead>
                  <TableHead>Статус токена</TableHead>
                  <TableHead>Действия</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {loading ? (
                  <TableRow>
                    <TableCell colSpan={7} className="text-center">
                      Завантаження...
                    </TableCell>
                  </TableRow>
                ) : error ? (
                  <TableRow>
                    <TableCell colSpan={7} className="text-center text-red-500">
                      Помилка: {error}
                    </TableCell>
                  </TableRow>
                ) : accounts.length === 0 ? (
                  <TableRow>
                    <TableCell colSpan={7} className="text-center">
                      Немає акаунтів
                    </TableCell>
                  </TableRow>
                ) : (
                  accounts.map((account) => (
                  <TableRow key={account.id}>
                    <TableCell>
                      <Checkbox
                        checked={selectedAccounts.includes(account.id)}
                        onCheckedChange={(checked) => handleSelectAccount(account.id, checked as boolean)}
                      />
                    </TableCell>
                    <TableCell>
                      <div className="font-mono">#{account.id}</div>
                    </TableCell>
                    <TableCell>
                      <div className="space-y-1">
                        <div className="font-medium">{account.name} ({account.facebookId})</div>
                        {account.cookiesLoaded && (
                          <Badge variant="secondary" className="text-xs">Куки загружены</Badge>
                        )}
                        <div className="text-sm text-muted-foreground">
                          Основной кабинет: <strong>{account.primaryCabinet}</strong>
                        </div>
                        <div className="text-sm text-muted-foreground">
                          <strong>({account.primaryCabinetId})</strong>{' '}
                          <Badge variant="outline" className="text-xs">
                            Все кабинеты ({account.totalCabinets})
                          </Badge>
                        </div>
                      </div>
                    </TableCell>
                    <TableCell className="text-center">
                      <span className="text-primary">—</span>
                    </TableCell>
                    <TableCell>
                      <div className="space-y-1 text-sm">
                        {account.balance && <div><strong>Баланс:</strong> {account.balance}</div>}
                        {account.dailyLimit && <div><strong>Лимит:</strong> {account.dailyLimit}</div>}
                      </div>
                    </TableCell>
                    <TableCell>
                      {getStatusBadge(account.status)}
                    </TableCell>
                    <TableCell>
                      {getStatusBadge(account.tokenStatus)}
                    </TableCell>
                    <TableCell>
                      <div className="flex items-center space-x-1">
                        <Button variant="outline" size="sm">
                          <Edit className="h-4 w-4" />
                        </Button>
                        <DropdownMenu>
                          <DropdownMenuTrigger asChild>
                            <Button variant="outline" size="sm">
                              <MoreVertical className="h-4 w-4" />
                            </Button>
                          </DropdownMenuTrigger>
                          <DropdownMenuContent>
                            <DropdownMenuItem>
                              <Settings className="h-4 w-4 mr-2" />
                              Управление
                            </DropdownMenuItem>
                            <DropdownMenuItem>
                              <Users className="h-4 w-4 mr-2" />
                              Страницы
                            </DropdownMenuItem>
                            <DropdownMenuItem>
                              <BarChart3 className="h-4 w-4 mr-2" />
                              Статистика
                            </DropdownMenuItem>
                            <DropdownMenuItem>
                              <MessageSquare className="h-4 w-4 mr-2" />
                              Комментарии
                            </DropdownMenuItem>
                          </DropdownMenuContent>
                        </DropdownMenu>
                        <Button variant="destructive" size="sm">
                          <Trash2 className="h-4 w-4" />
                        </Button>
                      </div>
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </div>

          {/* Bulk Actions */}
          {selectedAccounts.length > 0 && (
            <div className="mt-4 p-4 bg-muted rounded-md">
              <div className="flex items-center justify-between">
                <span className="text-sm text-muted-foreground">
                  Выбрано аккаунтов: {selectedAccounts.length}
                </span>
                <DropdownMenu>
                  <DropdownMenuTrigger asChild>
                    <Button>Действия</Button>
                  </DropdownMenuTrigger>
                  <DropdownMenuContent>
                    <DropdownMenuItem>Создать БМ</DropdownMenuItem>
                    <DropdownMenuItem>Создать страницу</DropdownMenuItem>
                    <DropdownMenuItem>Переместить в группу</DropdownMenuItem>
                    <DropdownMenuItem>Сменить прокси</DropdownMenuItem>
                    <DropdownMenuItem>Включить ПРОФ режим</DropdownMenuItem>
                    <DropdownMenuItem>Выключить ПРОФ режим</DropdownMenuItem>
                    <DropdownMenuItem>Автоправила</DropdownMenuItem>
                    <DropdownMenuItem>Уведомления</DropdownMenuItem>
                    <DropdownMenuItem>Авточистка комментариев</DropdownMenuItem>
                    <DropdownMenuItem className="text-destructive">
                      Удалить выбранные
                    </DropdownMenuItem>
                  </DropdownMenuContent>
                </DropdownMenu>
              </div>
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
}