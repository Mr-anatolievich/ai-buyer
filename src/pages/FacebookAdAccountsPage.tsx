import { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Switch } from '@/components/ui/switch';
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from '@/components/ui/dropdown-menu';
import { Checkbox } from '@/components/ui/checkbox';
import { useTranslations } from '@/lib/translations';
import { MoreHorizontal, Search, Filter, CreditCard, TrendingUp, DollarSign, Calendar, AlertTriangle } from 'lucide-react';

interface AdAccount {
  id: string;
  name: string;
  account_status: string;
  currency: string;
  timezone: string;
  business?: string;
  spend_cap: number;
  daily_spend_limit: number;
  amount_spent: number;
  balance: number;
}

interface FacebookAccount {
  id: string;
  name: string;
  facebook_id: string;
  status: string;
  token_status: string;
}

export default function FacebookAdAccountsPage() {
  const t = useTranslations();
  const [selectedAccount, setSelectedAccount] = useState<string>('');
  const [selectedAdAccounts, setSelectedAdAccounts] = useState<string[]>([]);
  const [multiSelect, setMultiSelect] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');
  const [statusFilter, setStatusFilter] = useState<string[]>([]);
  
  // States for dynamic data
  const [facebookAccounts, setFacebookAccounts] = useState<FacebookAccount[]>([]);
  const [adAccounts, setAdAccounts] = useState<AdAccount[]>([]);
  const [loading, setLoading] = useState(false);
  const [accountsLoading, setAccountsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  // Load Facebook accounts from API
  const loadFacebookAccounts = async () => {
    setAccountsLoading(true);
    try {
      const response = await fetch('http://localhost:8000/api/facebook/accounts');
      const result = await response.json();
      
      if (response.ok && result.status === 'success') {
        setFacebookAccounts(result.data);
      } else {
        setError('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞–∫–∫–∞—É–Ω—Ç—ñ–≤');
      }
    } catch (err) {
      setError('–ü–æ–º–∏–ª–∫–∞ –∑\'—î–¥–Ω–∞–Ω–Ω—è –∑ —Å–µ—Ä–≤–µ—Ä–æ–º');
      console.error('Load accounts error:', err);
    } finally {
      setAccountsLoading(false);
    }
  };

  // Load ad accounts for selected Facebook account
  const loadAdAccounts = async (accountId: string) => {
    setLoading(true);
    setError(null);
    try {
      const response = await fetch(`http://localhost:8000/api/facebook/accounts/${accountId}/adaccounts`);
      const result = await response.json();
      
      if (response.ok && result.status === 'success') {
        setAdAccounts(result.data);
      } else {
        // –ü–æ–∫–∞–∑—É—î–º–æ –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
        let errorMessage = result.detail || '–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–µ–∫–ª–∞–º–Ω–∏—Ö –∫–∞–±—ñ–Ω–µ—Ç—ñ–≤';
        
        if (result.suggestion) {
          errorMessage += `\nüí° ${result.suggestion}`;
        }
        
        // –î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–æ—Ä–∞–¥–∏ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        if (errorMessage.includes('—Ç–æ–∫–µ–Ω') || errorMessage.includes('token')) {
          errorMessage += '\n\nüîß –Ø–∫ –≤–∏–ø—Ä–∞–≤–∏—Ç–∏: –ü–µ—Ä–µ–π–¥—ñ—Ç—å –≤ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞–∫–∫–∞—É–Ω—Ç–∞ —Ç–∞ –æ–Ω–æ–≤—ñ—Ç—å —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø—É.';
        } else if (errorMessage.includes('permission') || errorMessage.includes('–¥–æ–∑–≤—ñ–ª')) {
          errorMessage += '\n\nüîß –Ø–∫ –≤–∏–ø—Ä–∞–≤–∏—Ç–∏: –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è —â–æ —Ç–æ–∫–µ–Ω –º–∞—î –¥–æ–∑–≤—ñ–ª "ads_read".';
        }
        
        setError(errorMessage);
        setAdAccounts([]);
      }
    } catch (err) {
      setError('–ü–æ–º–∏–ª–∫–∞ –∑\'—î–¥–Ω–∞–Ω–Ω—è –∑ —Å–µ—Ä–≤–µ—Ä–æ–º. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —á–∏ –ø—Ä–∞—Ü—é—î backend.');
      setAdAccounts([]);
      console.error('Load ad accounts error:', err);
    } finally {
      setLoading(false);
    }
  };

  // Load Facebook accounts on component mount
  useEffect(() => {
    loadFacebookAccounts();
  }, []);

  // Load ad accounts when account is selected
  useEffect(() => {
    if (selectedAccount) {
      loadAdAccounts(selectedAccount);
    } else {
      setAdAccounts([]);
    }
  }, [selectedAccount]);

  const selectedFacebookAccount = facebookAccounts.find(acc => acc.id === selectedAccount);
  
  const filteredAdAccounts = adAccounts.filter(account => {
    const matchesSearch = account.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         account.id.includes(searchTerm);
    const matchesStatus = statusFilter.length === 0 || statusFilter.includes(account.account_status);
    return matchesSearch && matchesStatus;
  });

  const getStatusBadge = (status: string) => {
    switch (status) {
      case 'ACTIVE':
        return <Badge className="bg-success text-success-foreground">–ê–∫—Ç–∏–≤–µ–Ω</Badge>;
      case 'DISABLED':
        return <Badge variant="secondary">–í—ñ–¥–∫–ª—é—á–µ–Ω–∏–π</Badge>;
      case 'UNSETTLED':
        return <Badge className="bg-destructive text-destructive-foreground">UNSETTLED</Badge>;
      default:
        return <Badge variant="outline">{status}</Badge>;
    }
  };

  const toggleAdAccountSelection = (adAccountId: string) => {
    setSelectedAdAccounts(prev => 
      prev.includes(adAccountId) 
        ? prev.filter(id => id !== adAccountId)
        : [...prev, adAccountId]
    );
  };

  const selectAllAdAccounts = () => {
    if (selectedAdAccounts.length === filteredAdAccounts.length) {
      setSelectedAdAccounts([]);
    } else {
      setSelectedAdAccounts(filteredAdAccounts.map(acc => acc.id));
    }
  };

  return (
    <div className="container mx-auto p-6 space-y-6">
      <div className="flex items-center justify-between">
        <h1 className="text-3xl font-bold">{t.adAccounts}</h1>
      </div>

      {error && (
        <div className="bg-destructive/10 border border-destructive/20 rounded-lg p-4">
          <div className="text-destructive text-sm whitespace-pre-line">{error}</div>
        </div>
      )}

      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <CreditCard className="w-5 h-5" />
            –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–∏–±–æ—Ä—É –∞–∫–∞—É–Ω—Ç–∞
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="flex items-center space-x-2">
            <Switch
              id="multiselect"
              checked={multiSelect}
              onCheckedChange={setMultiSelect}
            />
            <Label htmlFor="multiselect">–ú—É–ª—å—Ç–∏–≤–∏–±—ñ—Ä</Label>
          </div>

          <div className="space-y-4">
            <div>
              <Label htmlFor="account-select">–í–∏–±–µ—Ä—ñ—Ç—å –∞–∫–∞—É–Ω—Ç</Label>
              <Select value={selectedAccount} onValueChange={setSelectedAccount}>
                <SelectTrigger id="account-select" className="w-full">
                  <SelectValue placeholder="–û–±–µ—Ä—ñ—Ç—å –∞–∫–∞—É–Ω—Ç..." />
                </SelectTrigger>
                <SelectContent className="bg-background border z-50">
                  {accountsLoading ? (
                    <SelectItem value="loading" disabled>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</SelectItem>
                  ) : facebookAccounts.length === 0 ? (
                    <SelectItem value="no-accounts" disabled>–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∞–∫–∫–∞—É–Ω—Ç—ñ–≤</SelectItem>
                  ) : (
                    facebookAccounts.map((account) => (
                      <SelectItem key={account.id} value={account.id}>
                        #{account.id} - {account.name} ({account.facebook_id})
                      </SelectItem>
                    ))
                  )}
                </SelectContent>
              </Select>
            </div>

            {selectedAccount && (
              <div className="flex gap-2 flex-wrap">
                <Button variant="outline" size="sm">
                  –°—Ç–≤–æ—Ä–∏—Ç–∏ –ë–ú
                </Button>
                <Button variant="outline" size="sm">
                  –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ë–ú–∞–º–∏
                </Button>
                <Button variant="outline" size="sm">
                  –°—Ç–æ—Ä—ñ–Ω–∫–∏ –∞–∫–∞—É–Ω—Ç–∞
                </Button>
                {multiSelect && (
                  <Button 
                    variant="default" 
                    size="sm"
                    disabled={selectedAdAccounts.length === 0}
                  >
                    –ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ ({selectedAdAccounts.length})
                  </Button>
                )}
              </div>
            )}
          </div>
        </CardContent>
      </Card>

      {selectedAccount && (
        <Card>
          <CardHeader>
            <div className="flex justify-between items-center">
              <CardTitle className="flex items-center gap-2">
                <TrendingUp className="w-5 h-5" />
                –†–µ–∫–ª–∞–º–Ω—ñ –∫–∞–±—ñ–Ω–µ—Ç–∏ - {selectedFacebookAccount?.name}
              </CardTitle>
              <div className="flex gap-2">
                <div className="relative">
                  <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4" />
                  <Input
                    placeholder="–ü–æ—à—É–∫..."
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    className="pl-10 w-64"
                  />
                </div>
                <Select value={statusFilter.length === 0 ? "all" : statusFilter.join(',')} onValueChange={(value) => setStatusFilter(value === "all" ? [] : value.split(','))}>
                  <SelectTrigger className="w-40">
                    <Filter className="w-4 h-4 mr-2" />
                    <SelectValue placeholder="–§—ñ–ª—å—Ç—Ä" />
                  </SelectTrigger>
                  <SelectContent className="bg-background border z-50">
                    <SelectItem value="all">–í—Å—ñ —Å—Ç–∞—Ç—É—Å–∏</SelectItem>
                    <SelectItem value="active">–ê–∫—Ç–∏–≤–Ω—ñ</SelectItem>
                    <SelectItem value="risk_payment">RISK_PAYMENT</SelectItem>
                    <SelectItem value="disabled">–í—ñ–¥–∫–ª—é—á–µ–Ω—ñ</SelectItem>
                    <SelectItem value="unsettled">UNSETTLED</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>
          </CardHeader>
          <CardContent>
            <div className="rounded-md border">
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead className="w-12">
                      <Checkbox
                        checked={selectedAdAccounts.length === filteredAdAccounts.length && filteredAdAccounts.length > 0}
                        onCheckedChange={selectAllAdAccounts}
                      />
                    </TableHead>
                    <TableHead>–ö–∞–±—ñ–Ω–µ—Ç</TableHead>
                    <TableHead>–§—ñ–Ω–∞–Ω—Å–∏</TableHead>
                    <TableHead className="text-center">–ê–≤—Ç–æ–∫–æ–º–µ–Ω—Ç–∞—Ä—ñ</TableHead>
                    <TableHead className="text-center">–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è</TableHead>
                    <TableHead className="text-center">–°—Ç–∞—Ç—É—Å –∫–∞–±—ñ–Ω–µ—Ç—É</TableHead>
                    <TableHead className="text-center">–î—ñ—ó</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {loading ? (
                    <TableRow>
                      <TableCell colSpan={6} className="text-center py-8">
                        –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–µ–∫–ª–∞–º–Ω–∏—Ö –∫–∞–±—ñ–Ω–µ—Ç—ñ–≤...
                      </TableCell>
                    </TableRow>
                  ) : error ? (
                    <TableRow>
                      <TableCell colSpan={6} className="text-center py-8 text-destructive">
                        {error}
                      </TableCell>
                    </TableRow>
                  ) : filteredAdAccounts.length === 0 ? (
                    <TableRow>
                      <TableCell colSpan={6} className="text-center py-8 text-muted-foreground">
                        {selectedAccount ? '–ù–µ–º–∞—î —Ä–µ–∫–ª–∞–º–Ω–∏—Ö –∫–∞–±—ñ–Ω–µ—Ç—ñ–≤ –¥–ª—è —Ü—å–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞' : '–û–±–µ—Ä—ñ—Ç—å –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Ä–µ–∫–ª–∞–º–Ω–∏—Ö –∫–∞–±—ñ–Ω–µ—Ç—ñ–≤'}
                      </TableCell>
                    </TableRow>
                  ) : (
                    filteredAdAccounts.map((account) => (
                      <TableRow key={account.id} className={account.account_status === 'ACTIVE' ? 'bg-success/5' : ''}>
                        <TableCell>
                          <Checkbox
                            checked={selectedAdAccounts.includes(account.id)}
                            onCheckedChange={() => toggleAdAccountSelection(account.id)}
                          />
                        </TableCell>
                        <TableCell>
                          <div className="space-y-1">
                            <h6 className="font-medium">{account.name}</h6>
                            <div className="text-xs text-muted-foreground space-y-1">
                              <p><strong>ID:</strong> {account.id}</p>
                              {account.business && (
                                <p><strong>–ë–ú:</strong> {account.business}</p>
                              )}
                              <p><strong>–ß–∞—Å–æ–≤–∏–π –ø–æ—è—Å:</strong> {account.timezone}</p>
                              <p><strong>–í–∞–ª—é—Ç–∞:</strong> {account.currency}</p>
                            </div>
                          </div>
                        </TableCell>
                        <TableCell>
                          <div className="text-xs space-y-1">
                            <p><strong>–í–∏—Ç—Ä–∞—á–µ–Ω–æ:</strong> {account.amount_spent} {account.currency}</p>
                            <p><strong>–ë–∞–ª–∞–Ω—Å:</strong> {account.balance} {account.currency}</p>
                            {account.spend_cap > 0 && (
                              <p><strong>–õ—ñ–º—ñ—Ç –≤–∏—Ç—Ä–∞—Ç:</strong> {account.spend_cap} {account.currency}</p>
                            )}
                            {account.daily_spend_limit > 0 && (
                              <p><strong>–î–µ–Ω–Ω–∏–π –ª—ñ–º—ñ—Ç:</strong> {account.daily_spend_limit} {account.currency}</p>
                            )}
                          </div>
                        </TableCell>
                        <TableCell className="text-center">
                          <Badge variant="outline">
                            –í–∏–º–∫
                          </Badge>
                        </TableCell>
                        <TableCell className="text-center">
                          <div className="flex flex-col gap-1">
                            <Badge variant="outline" className="text-xs">
                              –ë—ñ–ª–ª—ñ–Ω–≥–∏
                            </Badge>
                            <Badge variant="outline" className="text-xs">
                              –ú–æ–¥–µ—Ä–∞—Ü—ñ—è
                            </Badge>
                            <Badge variant="outline" className="text-xs">
                              –°—Ç–∞—Ç—É—Å
                            </Badge>
                          </div>
                        </TableCell>
                        <TableCell className="text-center">
                          {getStatusBadge(account.account_status)}
                        </TableCell>
                        <TableCell className="text-center">
                          <DropdownMenu>
                            <DropdownMenuTrigger asChild>
                              <Button variant="ghost" size="sm">
                                <MoreHorizontal className="w-4 h-4" />
                              </Button>
                            </DropdownMenuTrigger>
                            <DropdownMenuContent className="bg-background border z-50">
                              <DropdownMenuItem>
                                <TrendingUp className="w-4 h-4 mr-2" />
                                –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                              </DropdownMenuItem>
                              <DropdownMenuItem>
                                –ö–æ–Ω—Å–æ–ª—å
                              </DropdownMenuItem>
                              <DropdownMenuItem>
                                <DollarSign className="w-4 h-4 mr-2" />
                                –ë—ñ–ª–ª—ñ–Ω–≥–∏
                              </DropdownMenuItem>
                              <DropdownMenuItem className="text-destructive">
                                –í–∏–¥–∞–ª–∏—Ç–∏
                              </DropdownMenuItem>
                            </DropdownMenuContent>
                          </DropdownMenu>
                        </TableCell>
                      </TableRow>
                    ))
                  )}
                </TableBody>
              </Table>
            </div>
            
            {filteredAdAccounts.length === 0 && selectedAccount && (
              <div className="text-center py-8 text-muted-foreground">
                <p>–ù–µ–º–∞—î —Ä–µ–∫–ª–∞–º–Ω–∏—Ö –∫–∞–±—ñ–Ω–µ—Ç—ñ–≤ –¥–ª—è –æ–±—Ä–∞–Ω–æ–≥–æ –∞–∫–∞—É–Ω—Ç–∞</p>
              </div>
            )}
          </CardContent>
        </Card>
      )}

      {!selectedAccount && (
        <Card>
          <CardContent className="py-8">
            <div className="text-center text-muted-foreground">
              <CreditCard className="w-12 h-12 mx-auto mb-4 opacity-50" />
              <p>–û–±–µ—Ä—ñ—Ç—å –∞–∫–∞—É–Ω—Ç –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Ä–µ–∫–ª–∞–º–Ω–∏—Ö –∫–∞–±—ñ–Ω–µ—Ç—ñ–≤</p>
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
}