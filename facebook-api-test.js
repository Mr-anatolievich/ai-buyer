// –¢–µ—Å—Ç–æ–≤–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ Facebook API
// –ó–∞–ø—É—Å—Ç—ñ—Ç—å —Ü–µ–π —Å–∫—Ä–∏–ø—Ç —É –±—Ä–∞—É–∑–µ—Ä–Ω—ñ–π –∫–æ–Ω—Å–æ–ª—ñ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è

const ACCESS_TOKEN =
  "EAAK6iOQnyksBPcyaqKnpq3MxQjyGajXnUvnDZCpJs1w6ZBcCYOAGpdPUwfaFvZBZBbMGFFfd6YM09FsAVyjWqDIZA3CIJrePPVipuiR6557YReAhZBphDbq1ZBYS62GC03gfAT7hUtLypHTMx4310jbhW1LOBRG0ahCbP3XLIHkTmpUPalAZAyYA01qzk7kAkmhOQdZCeKZBwbmOgRamRxHybGZBFLR9LRZCFIsMlqadzou2jaSGW4hurPADCAZBBn1DG3P8ZD";

// 1. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
async function testUserInfo() {
  try {
    const response = await fetch(
      `https://graph.facebook.com/v18.0/me?access_token=${ACCESS_TOKEN}`
    );
    const data = await response.json();
    console.log("–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:", data);
    return data;
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:", error);
  }
}

// 2. –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–∫–ª–∞–º–Ω–∏—Ö –∞–∫–∞—É–Ω—Ç—ñ–≤
async function testAdAccounts() {
  try {
    const response = await fetch(
      `https://graph.facebook.com/v18.0/me/adaccounts?fields=id,name,account_status,currency,timezone_name&access_token=${ACCESS_TOKEN}`
    );
    const data = await response.json();
    console.log("–†–µ–∫–ª–∞–º–Ω—ñ –∞–∫–∞—É–Ω—Ç–∏:", data);
    return data;
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–∫–ª–∞–º–Ω–∏—Ö –∞–∫–∞—É–Ω—Ç—ñ–≤:", error);
  }
}

// 3. –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø—É –¥–æ –∫–∞–º–ø–∞–Ω—ñ–π (–∑–∞–º—ñ–Ω—ñ—Ç—å AD_ACCOUNT_ID –Ω–∞ –≤–∞—à)
async function testCampaigns(adAccountId) {
  try {
    const response = await fetch(
      `https://graph.facebook.com/v18.0/act_${adAccountId}/campaigns?fields=id,name,status,effective_status&access_token=${ACCESS_TOKEN}`
    );
    const data = await response.json();
    console.log("–ö–∞–º–ø–∞–Ω—ñ—ó:", data);
    return data;
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–∞–º–ø–∞–Ω—ñ–π:", error);
  }
}

// 4. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ–∑–≤–æ–ª—ñ–≤ —Ç–æ–∫–µ–Ω—É
async function testTokenPermissions() {
  try {
    const response = await fetch(
      `https://graph.facebook.com/v18.0/me/permissions?access_token=${ACCESS_TOKEN}`
    );
    const data = await response.json();
    console.log("–î–æ–∑–≤–æ–ª–∏ —Ç–æ–∫–µ–Ω—É:", data);
    return data;
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥–æ–∑–≤–æ–ª—ñ–≤:", error);
  }
}

// –ó–∞–ø—É—Å–∫ –≤—Å—ñ—Ö —Ç–µ—Å—Ç—ñ–≤
async function runAllTests() {
  console.log("üöÄ –ü–æ—á–∞—Ç–æ–∫ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è Facebook API...\n");

  console.log("1Ô∏è‚É£ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞...");
  const userInfo = await testUserInfo();

  console.log("\n2Ô∏è‚É£ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ–∑–≤–æ–ª—ñ–≤...");
  const permissions = await testTokenPermissions();

  console.log("\n3Ô∏è‚É£ –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–∫–ª–∞–º–Ω–∏—Ö –∞–∫–∞—É–Ω—Ç—ñ–≤...");
  const adAccounts = await testAdAccounts();

  if (adAccounts && adAccounts.data && adAccounts.data.length > 0) {
    const firstAccountId = adAccounts.data[0].id.replace("act_", "");
    console.log(`\n4Ô∏è‚É£ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∫–∞–º–ø–∞–Ω—ñ–π –¥–ª—è –∞–∫–∞—É–Ω—Ç—É ${firstAccountId}...`);
    await testCampaigns(firstAccountId);
  }

  console.log("\n‚úÖ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!");
}

// –ó–∞–ø—É—Å—Ç–∏—Ç–∏ —Ç–µ—Å—Ç–∏
runAllTests();
