// Facebook Ad Accounts Extractor - Popup Script
console.log("üéØ Facebook Ad Accounts Extractor Popup –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ");

class ExtractorPopup {
  constructor() {
    this.results = null;
    this.initializeUI();
    this.loadSavedResults();
  }

  initializeUI() {
    // –û—Ç—Ä–∏–º—É—î–º–æ –µ–ª–µ–º–µ–Ω—Ç–∏
    this.statusEl = document.getElementById("status");
    this.extractBtn = document.getElementById("extractBtn");
    this.sendBtn = document.getElementById("sendBtn");
    this.resultsEl = document.getElementById("results");
    this.sendResultsEl = document.getElementById("sendResults");
    this.errorEl = document.getElementById("error");

    // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
    if (this.extractBtn) {
      this.extractBtn.addEventListener("click", () => this.extractNow());
    }

    if (this.sendBtn) {
      this.sendBtn.addEventListener("click", () => this.sendToBackend());
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ—Ç–æ—á–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É
    this.checkCurrentTab();
  }

  async checkCurrentTab() {
    try {
      const [tab] = await chrome.tabs.query({
        active: true,
        currentWindow: true,
      });

      if (tab.url.includes("facebook.com")) {
        this.updateStatus(
          "success",
          "–ù–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ Facebook",
          "–†–æ–∑—à–∏—Ä–µ–Ω–Ω—è –≥–æ—Ç–æ–≤–µ –¥–æ —Ä–æ–±–æ—Ç–∏"
        );

        if (tab.url.includes("adsmanager")) {
          this.updateStatus(
            "success",
            "–ù–∞ Ads Manager",
            "–Ü–¥–µ–∞–ª—å–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –¥–ª—è –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è!"
          );
        }
      } else {
        this.updateStatus(
          "warning",
          "–ù–µ –Ω–∞ Facebook",
          "–ü–µ—Ä–µ–π–¥—ñ—Ç—å –Ω–∞ facebook.com –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è"
        );
      }

      // –û–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω—Ñ–æ –ø—Ä–æ –ø–æ—Ç–æ—á–Ω—É URL
      const currentUrlEl = document.getElementById("currentUrl");
      if (currentUrlEl) {
        currentUrlEl.textContent = tab.url;
      }
    } catch (error) {
      this.updateStatus(
        "error",
        "–ü–æ–º–∏–ª–∫–∞",
        "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É"
      );
    }
  }

  async extractNow() {
    this.extractBtn.disabled = true;
    this.extractBtn.textContent = "‚è≥ –í–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è...";

    try {
      const [tab] = await chrome.tabs.query({
        active: true,
        currentWindow: true,
      });

      if (!tab.url.includes("facebook.com")) {
        throw new Error("–ü–æ—Ç—Ä—ñ–±–Ω–æ –±—É—Ç–∏ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ Facebook");
      }

      // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ content script
      const response = await chrome.tabs.sendMessage(tab.id, {
        type: "EXTRACT_NOW",
      });

      if (response && response.success) {
        this.updateStatus(
          "success",
          "–í–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è –∑–∞–ø—É—â–µ–Ω–æ",
          "–û—á—ñ–∫—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏..."
        );

        // –ß–µ–∫–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
        setTimeout(() => this.loadSavedResults(), 2000);
      } else {
        throw new Error("Content script –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î");
      }
    } catch (error) {
      console.error("–ü–æ–º–∏–ª–∫–∞ –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è:", error);
      this.updateStatus("error", "–ü–æ–º–∏–ª–∫–∞ –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è", error.message);
    } finally {
      this.extractBtn.disabled = false;
      this.extractBtn.textContent = "üîç –í–∏—Ç—è–≥–Ω—É—Ç–∏ –∑–∞—Ä–∞–∑";
    }
  }

  async loadSavedResults() {
    try {
      const [tab] = await chrome.tabs.query({
        active: true,
        currentWindow: true,
      });

      if (!tab.url.includes("facebook.com")) {
        return;
      }

      // –û—Ç—Ä–∏–º—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑ content script
      const response = await chrome.tabs.sendMessage(tab.id, {
        type: "GET_RESULTS",
      });

      if (response && response.success && response.data) {
        this.results = response.data;
        this.displayResults(this.results);
      }
    } catch (error) {
      // Content script –º–æ–∂–µ –Ω–µ –±—É—Ç–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π - —Ü–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
      console.log(
        "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏:",
        error.message
      );
    }
  }

  displayResults(data) {
    if (!data || !data.accounts) {
      return;
    }

    console.log("üìä –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏:", data);

    // –û–Ω–æ–≤–ª—é—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫
    const countEl = document.getElementById("accountsCount");
    if (countEl) {
      countEl.textContent = data.total_accounts || 0;
    }

    // –°–ø–∏—Å–æ–∫ –∫–∞–±—ñ–Ω–µ—Ç—ñ–≤
    const listEl = document.getElementById("accountsList");
    if (listEl) {
      if (data.accounts.length > 0) {
        listEl.innerHTML = data.accounts
          .map((account) => `<div class="account-item">üéØ ${account}</div>`)
          .join("");
      } else {
        listEl.innerHTML =
          '<div class="account-item" style="text-align: center; color: #6c757d;">–ö–∞–±—ñ–Ω–µ—Ç–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ</div>';
      }
    }

    // –î–∂–µ—Ä–µ–ª–∞ –¥–∞–Ω–∏—Ö
    const sourcesEl = document.getElementById("sourcesInfo");
    if (sourcesEl && data.detailed_data) {
      const sources = [
        ...new Set(data.detailed_data.map((item) => item.source)),
      ];
      sourcesEl.innerHTML = sources
        .map(
          (source) =>
            `<span style="background: #e9ecef; padding: 2px 6px; border-radius: 3px; margin: 2px; font-size: 10px;">${source}</span>`
        )
        .join("");
    }

    // –ü–æ–∫–∞–∑—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–∞ –∫–Ω–æ–ø–∫—É –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
    if (this.resultsEl) {
      this.resultsEl.style.display = "block";
    }

    if (this.sendBtn && data.total_accounts > 0) {
      this.sendBtn.style.display = "inline-block";
    }

    // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å
    if (data.total_accounts > 0) {
      this.updateStatus(
        "success",
        `–ó–Ω–∞–π–¥–µ–Ω–æ ${data.total_accounts} –∫–∞–±—ñ–Ω–µ—Ç—ñ–≤`,
        "–ì–æ—Ç–æ–≤–æ –¥–æ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏!"
      );
    } else {
      this.updateStatus(
        "warning",
        "–ö–∞–±—ñ–Ω–µ—Ç–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ",
        "–°–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ Ads Manager"
      );
    }
  }

  async sendToBackend() {
    if (!this.results) {
      this.updateStatus("error", "–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö", "–°–ø–æ—á–∞—Ç–∫—É –≤–∏—Ç—è–≥–Ω—ñ—Ç—å –¥–∞–Ω—ñ");
      return;
    }

    this.sendBtn.disabled = true;
    this.sendBtn.textContent = "üì§ –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ...";

    try {
      const response = await fetch(
        "http://localhost:8000/api/facebook/extension-data",
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(this.results),
        }
      );

      if (response.ok) {
        this.updateStatus(
          "success",
          "–£—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ!",
          "–î–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ AI-Buyer"
        );
        if (this.sendResultsEl) {
          this.sendResultsEl.style.display = "block";
        }
      } else {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
    } catch (error) {
      console.error("–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏:", error);
      this.updateStatus(
        "error",
        "–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏",
        `Backend –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π: ${error.message}`
      );
    } finally {
      this.sendBtn.disabled = false;
      this.sendBtn.textContent = "üì§ –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏";
    }
  }

  updateStatus(type, title, message) {
    if (!this.statusEl) return;

    this.statusEl.className = `status ${type}`;
    this.statusEl.innerHTML = `<strong>${title}</strong><br>${message}`;
  }

  showError(message) {
    if (this.errorEl) {
      const errorMessageEl = document.getElementById("errorMessage");
      if (errorMessageEl) {
        errorMessageEl.textContent = message;
      }
      this.errorEl.style.display = "block";
    }
  }
}

// –°–ª—É—Ö–∞—á –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤—ñ–¥ content script
chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
  console.log("üì® Popup –æ—Ç—Ä–∏–º–∞–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:", request);

  if (request.type === "AD_ACCOUNTS_EXTRACTED") {
    popup.results = request.data;
    popup.displayResults(request.data);
  }
});

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ DOM
document.addEventListener("DOMContentLoaded", () => {
  console.log("üöÄ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Popup");
  window.popup = new ExtractorPopup();
});

console.log("‚úÖ Popup script –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ");
