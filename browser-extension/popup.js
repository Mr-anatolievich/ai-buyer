// Popup script
document.addEventListener("DOMContentLoaded", async () => {
  const extractBtn = document.getElementById("extractBtn");
  const loading = document.getElementById("loading");
  const status = document.getElementById("status");
  const tokenInfo = document.getElementById("tokenInfo");
  const tokenPreview = document.getElementById("tokenPreview");
  const userAgentPreview = document.getElementById("userAgentPreview");
  const cookiesCount = document.getElementById("cookiesCount");
  const copyMultiTokenBtn = document.getElementById("copyMultiTokenBtn");
  const sendToAIBuyerBtn = document.getElementById("sendToAIBuyerBtn");
  const aibuyerUrlInput = document.getElementById("aibuyerUrl");
  const copySuccess = document.getElementById("copySuccess");

  let currentData = null;

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ—Ç–æ—á–Ω–æ—ó –≤–∫–ª–∞–¥–∫–∏
  const tabs = await chrome.tabs.query({ active: true, currentWindow: true });
  const currentTab = tabs[0];

  if (
    currentTab.url.includes("facebook.com") ||
    currentTab.url.includes("business.facebook.com") ||
    currentTab.url.includes("adsmanager.facebook.com")
  ) {
    status.className = "status success";
    status.textContent = "‚úÖ Facebook —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –∑–Ω–∞–π–¥–µ–Ω–∞";
    extractBtn.disabled = false;
  } else {
    status.className = "status error";
    status.textContent = "‚ùå –ü–æ—Ç—Ä—ñ–±–Ω–æ –≤—ñ–¥–∫—Ä–∏—Ç–∏ Facebook Ads Manager";
    extractBtn.disabled = true;
  }

  // –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è
  extractBtn.addEventListener("click", async () => {
    try {
      extractBtn.disabled = true;
      loading.style.display = "block";
      status.className = "status warning";
      status.textContent = "‚è≥ –í–∏—Ç—è–≥—É—î–º–æ –¥–∞–Ω—ñ...";
      
      console.log("üîç –ü–æ—á–∞—Ç–æ–∫ –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö...");

      // –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π —Ç–æ–∫–µ–Ω
      const storageData = await chrome.storage.local.get(['lastFoundToken']);
      console.log("üíæ –ó–±–µ—Ä–µ–∂–µ–Ω—ñ –¥–∞–Ω—ñ:", storageData);
      
      let token = null;
      let userAgent = navigator.userAgent;

      if (storageData.lastFoundToken && storageData.lastFoundToken.token) {
        const tokenAge = Date.now() - storageData.lastFoundToken.timestamp;
        if (tokenAge < 300000) { // 5 —Ö–≤–∏–ª–∏–Ω
          token = storageData.lastFoundToken.token;
          console.log("‚úÖ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π —Ç–æ–∫–µ–Ω");
        }
      }

      // –Ø–∫—â–æ –Ω–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞, —Å–ø—Ä–æ–±—É—î–º–æ –≤–∏—Ç—è–≥—Ç–∏ –∑ content script
      if (!token) {
        console.log("üîç –°–ø—Ä–æ–±—É—î–º–æ –≤–∏—Ç—è–≥—Ç–∏ –Ω–æ–≤–∏–π —Ç–æ–∫–µ–Ω...");
        
        // –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π content script
        let response;
        try {
          console.log("üìû Ping content script...");
          response = await Promise.race([
            chrome.tabs.sendMessage(currentTab.id, { action: "ping" }),
            new Promise((_, reject) => setTimeout(() => reject(new Error("Timeout")), 3000))
          ]);
          console.log("‚úÖ Content script –≤—ñ–¥–ø–æ–≤—ñ–≤:", response);
        } catch (error) {
          console.log("‚ùå Content script –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î:", error.message);

          // –°–ø—Ä–æ–±—É—î–º–æ —ñ–Ω–∂–µ–∫—Ç—É–≤–∞—Ç–∏ content script –≤—Ä—É—á–Ω—É
          try {
            console.log("üíâ –Ü–Ω–∂–µ–∫—Ç—É—î–º–æ content script...");
            await chrome.scripting.executeScript({
              target: { tabId: currentTab.id },
              files: ["content.js"],
            });

            // –î–∞–º–æ —á–∞—Å –Ω–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é
            await new Promise((resolve) => setTimeout(resolve, 2000));
            console.log("‚úÖ Content script —ñ–Ω–∂–µ–∫—Ç–æ–≤–∞–Ω–∏–π");
          } catch (injectError) {
            console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω–∂–µ–∫—Ü—ñ—ó content script:", injectError);
          }
        }

        // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ content script
        try {
          console.log("üì§ –ó–∞–ø–∏—Ç—É—î–º–æ –¥–∞–Ω—ñ –∑ content script...");
          response = await Promise.race([
            chrome.tabs.sendMessage(currentTab.id, { action: "extractData" }),
            new Promise((_, reject) => setTimeout(() => reject(new Error("Timeout extracting data")), 5000))
          ]);
          console.log("üì• –û—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å:", response);
          
          if (response && response.success && response.data.token) {
            token = response.data.token;
            userAgent = response.data.userAgent || userAgent;
            console.log("‚úÖ –¢–æ–∫–µ–Ω –≤–∏—Ç—è–≥–Ω—É—Ç–æ –∑ content script");
          }
        } catch (error) {
          console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–≤'—è–∑–∫—É –∑ content script:", error);
          // –ù–µ –≤–∏–∫–∏–¥–∞—î–º–æ –ø–æ–º–∏–ª–∫—É, —Å–ø—Ä–æ–±—É—î–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –¥–∞–Ω—ñ –∑ DOM –Ω–∞–ø—Ä—è–º—É
        }
      }

      // –Ø–∫—â–æ –≤—Å–µ —â–µ –Ω–µ–º–∞—î —Ç–æ–∫–µ–Ω–∞, –ø–æ–∫–∞–∂–µ–º–æ –ø–æ–º–∏–ª–∫—É
      if (!token) {
        throw new Error("–¢–æ–∫–µ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –≤–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ –≤ Facebook Ads Manager.");
      }

      // –û—Ç—Ä–∏–º—É—î–º–æ cookies —á–µ—Ä–µ–∑ Chrome API
      console.log("üç™ –û—Ç—Ä–∏–º—É—î–º–æ cookies...");
      const cookies = await chrome.cookies.getAll({
        domain: ".facebook.com",
      });
      console.log(`‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ ${cookies.length} cookies`);

      loading.style.display = "none";

      // –ì–æ—Ç—É—î–º–æ –¥–∞–Ω—ñ
      currentData = {
        token: token,
        cookies: cookies,
        userAgent: userAgent,
        url: currentTab.url
      };

      // –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é
      tokenPreview.textContent = currentData.token.substring(0, 50) + "...";
      userAgentPreview.textContent = currentData.userAgent;
      cookiesCount.textContent = `${currentData.cookies.length} cookies`;

      tokenInfo.style.display = "block";
      status.className = "status success";
      status.textContent = "‚úÖ –î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –≤–∏—Ç—è–≥–Ω—É—Ç–æ!";
      
      console.log("üéâ –í–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!");

    } catch (error) {
      console.error("‚ùå –ü–æ–º–∏–ª–∫–∞:", error);
      loading.style.display = "none";
      status.className = "status error";
      status.textContent = "‚ùå –ü–æ–º–∏–ª–∫–∞: " + error.message;
      extractBtn.disabled = false;
    }
  });

  // –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è –º—É–ª—å—Ç–∏—Ç–æ–∫–µ–Ω–∞
  copyMultiTokenBtn.addEventListener("click", async () => {
    if (!currentData) return;

    try {
      const multiToken = createMultiToken(
        currentData.token,
        currentData.cookies,
        currentData.userAgent
      );

      await navigator.clipboard.writeText(multiToken);

      copySuccess.style.display = "block";
      setTimeout(() => {
        copySuccess.style.display = "none";
      }, 3000);
    } catch (error) {
      console.error("–ü–æ–º–∏–ª–∫–∞ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è:", error);
      alert("–ü–æ–º–∏–ª–∫–∞ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è –≤ –±—É—Ñ–µ—Ä –æ–±–º—ñ–Ω—É");
    }
  });

  // –û–±—Ä–æ–±–Ω–∏–∫ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤ AI-Buyer
  sendToAIBuyerBtn.addEventListener("click", async () => {
    if (!currentData) return;

    try {
      const multiToken = createMultiToken(
        currentData.token,
        currentData.cookies,
        currentData.userAgent
      );

      // –û—Ç—Ä–∏–º—É—î–º–æ URL –∑ –ø–æ–ª—è –≤–≤–æ–¥—É –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∞–≤—Ç–æ–≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è
      const customUrl = aibuyerUrlInput.value.trim();

      if (customUrl) {
        // –ó–±–µ—Ä–µ–∂–µ–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–∏–π URL
        chrome.storage.local.set({ aibuyerUrl: customUrl });

        // –í–∏–¥–∞–ª—è—î–º–æ –∫—ñ–Ω—Ü–µ–≤–∏–π —Å–ª–µ—à —è–∫—â–æ –≤—ñ–Ω —î, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –ø–æ–¥–≤—ñ–π–Ω–æ–≥–æ —Å–ª–µ—à–∞
        const baseUrl = customUrl.replace(/\/$/, "");
        const fullUrl = `${baseUrl}/accounts/add?multitoken=${encodeURIComponent(
          multiToken
        )}`;
        chrome.tabs.create({ url: fullUrl });
      } else {
        // –ê–≤—Ç–æ–≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è: —Å–ø—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ –ø—Ä–∞—Ü—é—é—á–∏–π —Å–µ—Ä–≤–µ—Ä
        const possibleUrls = [
          `http://localhost:8080/accounts/add?multitoken=${encodeURIComponent(
            multiToken
          )}`,
          `http://localhost:3000/accounts/add?multitoken=${encodeURIComponent(
            multiToken
          )}`,
          `http://localhost:5173/accounts/add?multitoken=${encodeURIComponent(
            multiToken
          )}`,
          `http://localhost:4173/accounts/add?multitoken=${encodeURIComponent(
            multiToken
          )}`,
        ];

        let workingUrl = null;
        for (const url of possibleUrls) {
          try {
            const baseUrl = url.split("/accounts")[0];
            const response = await fetch(baseUrl, {
              method: "HEAD",
              signal: AbortSignal.timeout(2000), // 2 —Å–µ–∫—É–Ω–¥–∏ timeout
            });
            if (response.ok || response.status === 404) {
              // 404 –æ–∑–Ω–∞—á–∞—î —â–æ —Å–µ—Ä–≤–µ—Ä –ø—Ä–∞—Ü—é—î
              workingUrl = url;
              break;
            }
          } catch (error) {
            continue; // –°–ø—Ä–æ–±—É—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–∏–π URL
          }
        }

        if (workingUrl) {
          chrome.tabs.create({ url: workingUrl });
        } else {
          // –Ø–∫—â–æ –∂–æ–¥–µ–Ω —Å–µ—Ä–≤–µ—Ä –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –ø–æ—Ä—Ç
          chrome.tabs.create({ url: possibleUrls[0] });
        }
      }
    } catch (error) {
      console.error("–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏:", error);
      alert("–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤ AI-Buyer");
    }
  });

  // –§—É–Ω–∫—Ü—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –º—É–ª—å—Ç–∏—Ç–æ–∫–µ–Ω–∞
  function createMultiToken(token, cookies, userAgent) {
    const multiTokenData = {
      cookies: cookies.map((cookie) => ({
        domain: cookie.domain,
        expirationDate: cookie.expirationDate,
        hostOnly: cookie.hostOnly,
        httpOnly: cookie.httpOnly,
        name: cookie.name,
        path: cookie.path,
        sameSite: cookie.sameSite || "no_restriction",
        secure: cookie.secure,
        session: cookie.session,
        storeId: cookie.storeId || "0",
        value: cookie.value,
      })),
      ua: userAgent,
      token: token,
    };

    return btoa(JSON.stringify(multiTokenData));
  }

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö —Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è
  chrome.storage.local.get(["lastFoundToken", "aibuyerUrl"], async (result) => {
    if (result.lastFoundToken) {
      const data = result.lastFoundToken;
      const age = Date.now() - data.timestamp;

      if (age < 300000) { // 5 —Ö–≤–∏–ª–∏–Ω
        console.log("üéâ –ó–Ω–∞–π–¥–µ–Ω–æ —Å–≤—ñ–∂–∏–π —Ç–æ–∫–µ–Ω, –ø–æ–∫–∞–∑—É—î–º–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ!");
        
        // –û—Ç—Ä–∏–º—É—î–º–æ cookies
        const cookies = await chrome.cookies.getAll({
          domain: ".facebook.com",
        });
        
        // –ó–∞–ø–æ–≤–Ω—é—î–º–æ –¥–∞–Ω—ñ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ
        currentData = {
          token: data.token,
          cookies: cookies,
          userAgent: navigator.userAgent,
          url: data.url
        };
        
        // –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é
        tokenPreview.textContent = currentData.token.substring(0, 50) + "...";
        userAgentPreview.textContent = currentData.userAgent;
        cookiesCount.textContent = `${currentData.cookies.length} cookies`;

        tokenInfo.style.display = "block";
        status.className = "status success";
        status.textContent = "üéâ –¢–æ–∫–µ–Ω –∑–Ω–∞–π–¥–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Ç–∞ –≥–æ—Ç–æ–≤–∏–π –¥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è!";
        extractBtn.disabled = false;
      }
    }

    // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π URL
    if (result.aibuyerUrl) {
      aibuyerUrlInput.value = result.aibuyerUrl;
    }
  });
});
