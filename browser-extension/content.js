// Content script –¥–ª—è –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤ –∑ Facebook
console.log("ü§ñ AI-Buyer: Content script loaded on", window.location.href);

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è Access Token –∑ Facebook
function extractAccessToken() {
  console.log("üîç –®—É–∫–∞—î–º–æ Access Token...");

  // –ú–µ—Ç–æ–¥ 1: –ó localStorage
  const storageKeys = Object.keys(localStorage);
  for (const key of storageKeys) {
    try {
      const value = localStorage.getItem(key);
      if (value && value.includes("EAAB")) {
        const tokenMatch = value.match(/EAAB[A-Za-z0-9-_]+/);
        if (tokenMatch) {
          console.log("‚úÖ Token –∑–Ω–∞–π–¥–µ–Ω–æ –≤ localStorage");
          return tokenMatch[0];
        }
      }
    } catch (e) {
      // Ignore errors
    }
  }

  // –ú–µ—Ç–æ–¥ 2: –ó sessionStorage
  const sessionKeys = Object.keys(sessionStorage);
  for (const key of sessionKeys) {
    try {
      const value = sessionStorage.getItem(key);
      if (value && value.includes("EAAB")) {
        const tokenMatch = value.match(/EAAB[A-Za-z0-9-_]+/);
        if (tokenMatch) {
          console.log("‚úÖ Token –∑–Ω–∞–π–¥–µ–Ω–æ –≤ sessionStorage");
          return tokenMatch[0];
        }
      }
    } catch (e) {
      // Ignore errors
    }
  }

  // –ú–µ—Ç–æ–¥ 3: –ó –≥–ª–æ–±–∞–ª—å–Ω–∏—Ö –∑–º—ñ–Ω–Ω–∏—Ö
  try {
    if (window.require && window.require.cache) {
      const modules = Object.values(window.require.cache);
      for (const module of modules) {
        if (module && module.exports) {
          const moduleStr = JSON.stringify(module.exports);
          if (moduleStr.includes("EAAB")) {
            const tokenMatch = moduleStr.match(/EAAB[A-Za-z0-9-_]+/);
            if (tokenMatch) {
              console.log("‚úÖ Token –∑–Ω–∞–π–¥–µ–Ω–æ –≤ require.cache");
              return tokenMatch[0];
            }
          }
        }
      }
    }
  } catch (e) {
    // Ignore errors
  }

  // –ú–µ—Ç–æ–¥ 4: –ó DOM –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
  const scripts = document.querySelectorAll("script");
  for (const script of scripts) {
    if (script.textContent && script.textContent.includes("EAAB")) {
      const tokenMatch = script.textContent.match(/EAAB[A-Za-z0-9-_]+/);
      if (tokenMatch) {
        console.log("‚úÖ Token –∑–Ω–∞–π–¥–µ–Ω–æ –≤ script —Ç–µ–≥–∞—Ö");
        return tokenMatch[0];
      }
    }
  }

  // –ú–µ—Ç–æ–¥ 5: –ó –º–µ—Ç–∞ —Ç–µ–≥—ñ–≤
  const metaTags = document.querySelectorAll("meta");
  for (const meta of metaTags) {
    if (meta.content && meta.content.includes("EAAB")) {
      const tokenMatch = meta.content.match(/EAAB[A-Za-z0-9-_]+/);
      if (tokenMatch) {
        console.log("‚úÖ Token –∑–Ω–∞–π–¥–µ–Ω–æ –≤ meta —Ç–µ–≥–∞—Ö");
        return tokenMatch[0];
      }
    }
  }

  console.log("‚ùå Token –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
  return null;
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö cookies
function extractCookies() {
  const cookies = document.cookie.split(";").map((cookie) => {
    const [name, value] = cookie.trim().split("=");
    return {
      name: name,
      value: value || "",
      domain: window.location.hostname,
      path: "/",
      secure: window.location.protocol === "https:",
      httpOnly: false,
      sameSite: "no_restriction",
    };
  });

  console.log(`üç™ –ó–Ω–∞–π–¥–µ–Ω–æ ${cookies.length} cookies`);
  return cookies;
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è UserAgent
function getUserAgent() {
  const userAgent = navigator.userAgent;
  console.log("üåê UserAgent:", userAgent);
  return userAgent;
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –º—É–ª—å—Ç–∏—Ç–æ–∫–µ–Ω–∞
function createMultiToken(token, cookies, userAgent) {
  const multiToken = {
    cookies: cookies,
    ua: userAgent,
    token: token,
  };

  return btoa(JSON.stringify(multiToken));
}

// –°–ª—É—Ö–∞—á –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤—ñ–¥ popup
chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
  console.log("üì® –û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:", request);

  if (request.action === "extractData") {
    try {
      const token = extractAccessToken();
      const cookies = extractCookies();
      const userAgent = getUserAgent();

      if (token) {
        const multiToken = createMultiToken(token, cookies, userAgent);

        sendResponse({
          success: true,
          data: {
            token: token,
            cookies: cookies,
            userAgent: userAgent,
            multiToken: multiToken,
            url: window.location.href,
          },
        });
      } else {
        sendResponse({
          success: false,
          error:
            "Access Token –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –≤–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ –≤ Facebook Ads Manager.",
        });
      }
    } catch (error) {
      console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö:", error);
      sendResponse({
        success: false,
        error: "–ü–æ–º–∏–ª–∫–∞ –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö: " + error.message,
      });
    }
  }

  return true; // Allows async response
});

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
window.addEventListener("load", () => {
  setTimeout(() => {
    const token = extractAccessToken();
    if (token) {
      console.log("üéâ Token –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–Ω–∞–π–¥–µ–Ω–æ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏");
      chrome.runtime.sendMessage({
        action: "tokenFound",
        token: token,
      });
    }
  }, 3000);
});
