#!/usr/bin/env python3
"""
Facebook Ads Data Extractor –∑ Browser Automation (Selenium)
–¶–µ–π –ø—ñ–¥—Ö—ñ–¥ —ñ–º—ñ—Ç—É—î —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –±—Ä–∞—É–∑–µ—Ä—ñ
"""

import json
import sqlite3
import time
from http.server import HTTPServer, BaseHTTPRequestHandler
from urllib.parse import urlparse
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, NoSuchElementException
from webdriver_manager.chrome import ChromeDriverManager

# CORS headers
CORS_HEADERS = {
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
    'Access-Control-Allow-Headers': 'Content-Type, Authorization'
}

class FacebookBrowserExtractor:
    """–ö–ª–∞—Å –¥–ª—è –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è Facebook —Ä–µ–∫–ª–∞–º–Ω–∏—Ö –∫–∞–±—ñ–Ω–µ—Ç—ñ–≤ —á–µ—Ä–µ–∑ Selenium"""
    
    def __init__(self, cookies_data, user_agent, facebook_id):
        self.cookies_data = cookies_data
        self.user_agent = user_agent
        self.facebook_id = facebook_id
        self.driver = None
        
    def setup_browser(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Chrome –±—Ä–∞—É–∑–µ—Ä–∞ –∑ cookies"""
        print("üîß –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –±—Ä–∞—É–∑–µ—Ä...")
        
        chrome_options = Options()
        chrome_options.add_argument(f"--user-agent={self.user_agent}")
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")
        chrome_options.add_argument("--disable-blink-features=AutomationControlled")
        chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
        chrome_options.add_experimental_option('useAutomationExtension', False)
        
        # –î–ª—è production –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ headless —Ä–µ–∂–∏–º
        # chrome_options.add_argument("--headless")
        
        try:
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ webdriver-manager –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è ChromeDriver
            service = Service(ChromeDriverManager().install())
            self.driver = webdriver.Chrome(service=service, options=chrome_options)
            self.driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
            
            print("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–ø—É—â–µ–Ω–∏–π")
            return True
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
            return False
    
    def load_cookies(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è cookies –≤ –±—Ä–∞—É–∑–µ—Ä"""
        print("üç™ –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ cookies...")
        
        try:
            # –°–ø–æ—á–∞—Ç–∫—É –π–¥–µ–º–æ –Ω–∞ Facebook
            self.driver.get("https://www.facebook.com/")
            time.sleep(2)
            
            # –ü–∞—Ä—Å–∏–º–æ cookies –∑ —Å—Ç—Ä–æ–∫–∏
            cookies_list = []
            if self.cookies_data:
                for cookie_pair in self.cookies_data.split(';'):
                    cookie_pair = cookie_pair.strip()
                    if '=' in cookie_pair:
                        name, value = cookie_pair.split('=', 1)
                        cookies_list.append({
                            'name': name.strip(),
                            'value': value.strip(),
                            'domain': '.facebook.com',
                            'path': '/'
                        })
            
            # –î–æ–¥–∞—î–º–æ cookies –≤ –±—Ä–∞—É–∑–µ—Ä
            for cookie in cookies_list:
                try:
                    self.driver.add_cookie(cookie)
                except Exception as e:
                    print(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ cookie {cookie['name']}: {e}")
            
            print(f"‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(cookies_list)} cookies")
            
            # –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É –∑ cookies
            self.driver.refresh()
            time.sleep(3)
            
            return True
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è cookies: {e}")
            return False
    
    def check_login_status(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —É–≤—ñ–π—à–ª–∏ –≤ –∞–∫–∞—É–Ω—Ç"""
        print("üîç –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó...")
        
        try:
            # –®—É–∫–∞—î–º–æ –µ–ª–µ–º–µ–Ω—Ç–∏, —è–∫—ñ –≤–∫–∞–∑—É—é—Ç—å –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é
            login_indicators = [
                '[data-testid="blue_bar_profile_link"]',  # Profile link
                '[role="navigation"]',  # Navigation bar
                '[data-testid="left_nav_menu_list"]'  # Left navigation menu
            ]
            
            for selector in login_indicators:
                try:
                    element = self.driver.find_element(By.CSS_SELECTOR, selector)
                    if element:
                        print("‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π")
                        return True
                except NoSuchElementException:
                    continue
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î —Ñ–æ—Ä–º–∞ –≤—Ö–æ–¥—É
            login_form = self.driver.find_elements(By.CSS_SELECTOR, '[data-testid="royal_login_form"]')
            if login_form:
                print("‚ùå –ü–æ—Ç—Ä—ñ–±–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è - –ø–æ–∫–∞–∑—É—î—Ç—å—Å—è —Ñ–æ—Ä–º–∞ –≤—Ö–æ–¥—É")
                return False
            
            print("‚ùì –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –Ω–µ–≤–∏–∑–Ω–∞—á–µ–Ω–∏–π")
            return False
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó: {e}")
            return False
    
    def navigate_to_ads_manager(self):
        """–ù–∞–≤—ñ–≥–∞—Ü—ñ—è –¥–æ Ads Manager"""
        print("üéØ –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –≤ Ads Manager...")
        
        try:
            # –°–ø—Ä–æ–±—É—î–º–æ —Ä—ñ–∑–Ω—ñ —Å–ø–æ—Å–æ–±–∏ –¥—ñ—Å—Ç–∞—Ç–∏—Å—å Ads Manager
            ads_manager_urls = [
                "https://www.facebook.com/adsmanager/",
                "https://www.facebook.com/adsmanager/manage/campaigns",
                "https://business.facebook.com/adsmanager/"
            ]
            
            for url in ads_manager_urls:
                print(f"üîó –ü—Ä–æ–±—É—î–º–æ URL: {url}")
                self.driver.get(url)
                time.sleep(5)
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –¥—ñ–π—à–ª–∏ –¥–æ Ads Manager
                if self.check_ads_manager_page():
                    print("‚úÖ –£—Å–ø—ñ—à–Ω–æ –¥—ñ–π—à–ª–∏ –¥–æ Ads Manager")
                    return True
                    
            print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –¥—ñ–π—Ç–∏ –¥–æ Ads Manager")
            return False
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –≤ Ads Manager: {e}")
            return False
    
    def check_ads_manager_page(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –º–∏ –≤ Ads Manager"""
        try:
            # –®—É–∫–∞—î–º–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ Ads Manager
            ads_manager_indicators = [
                '[data-testid="ads_manager"]',
                '[data-testid="campaign_table"]',
                'h1:contains("Ads Manager")',
                '[data-testid="create_campaign_button"]',
                '.ads-manager-container'
            ]
            
            for selector in ads_manager_indicators:
                try:
                    if ':contains(' in selector:
                        # –î–ª—è text —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º XPath
                        xpath = f"//h1[contains(text(), 'Ads Manager')]"
                        element = self.driver.find_elements(By.XPATH, xpath)
                    else:
                        element = self.driver.find_elements(By.CSS_SELECTOR, selector)
                    
                    if element:
                        return True
                except:
                    continue
                    
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ URL
            current_url = self.driver.current_url
            if 'adsmanager' in current_url or 'business.facebook.com' in current_url:
                return True
                
            return False
            
        except Exception as e:
            print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ Ads Manager: {e}")
            return False
    
    def extract_ad_accounts(self):
        """–í–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è —Ä–µ–∫–ª–∞–º–Ω–∏—Ö –∫–∞–±—ñ–Ω–µ—Ç—ñ–≤"""
        print("üìä –í–∏—Ç—è–≥—É—î–º–æ —Ä–µ–∫–ª–∞–º–Ω—ñ –∫–∞–±—ñ–Ω–µ—Ç–∏...")
        
        ad_accounts = []
        
        try:
            # –ú–µ—Ç–æ–¥ 1: –®—É–∫–∞—î–º–æ –≤ DOM –µ–ª–µ–º–µ–Ω—Ç–∞—Ö
            accounts_from_dom = self.extract_from_dom()
            if accounts_from_dom:
                ad_accounts.extend(accounts_from_dom)
            
            # –ú–µ—Ç–æ–¥ 2: –®—É–∫–∞—î–º–æ –≤ JavaScript –æ–±'—î–∫—Ç–∞—Ö
            accounts_from_js = self.extract_from_javascript()
            if accounts_from_js:
                ad_accounts.extend(accounts_from_js)
            
            # –ú–µ—Ç–æ–¥ 3: –®—É–∫–∞—î–º–æ –≤ Network requests
            accounts_from_network = self.extract_from_network()
            if accounts_from_network:
                ad_accounts.extend(accounts_from_network)
            
            # –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –¥—É–±–ª—ñ–∫–∞—Ç–∏
            unique_accounts = {}
            for account in ad_accounts:
                account_id = account.get('account_id') or account.get('id')
                if account_id:
                    unique_accounts[account_id] = account
            
            final_accounts = list(unique_accounts.values())
            print(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ {len(final_accounts)} —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö —Ä–µ–∫–ª–∞–º–Ω–∏—Ö –∫–∞–±—ñ–Ω–µ—Ç—ñ–≤")
            
            return final_accounts
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è –∫–∞–±—ñ–Ω–µ—Ç—ñ–≤: {e}")
            return []
    
    def extract_from_dom(self):
        """–í–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è –∑ DOM –µ–ª–µ–º–µ–Ω—Ç—ñ–≤"""
        print("üîç –®—É–∫–∞—î–º–æ –≤ DOM –µ–ª–µ–º–µ–Ω—Ç–∞—Ö...")
        
        accounts = []
        
        try:
            # –ß–µ–∫–∞—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
            time.sleep(5)
            
            # –†—ñ–∑–Ω—ñ —Å–µ–ª–µ–∫—Ç–æ—Ä–∏ –¥–ª—è ad account –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
            selectors = [
                '[data-testid*="account"]',
                '[data-testid*="adaccount"]',
                '.account-selector',
                '[role="option"]',
                '.dropdown-item'
            ]
            
            for selector in selectors:
                try:
                    elements = self.driver.find_elements(By.CSS_SELECTOR, selector)
                    print(f"   –ó–Ω–∞–π–¥–µ–Ω–æ {len(elements)} –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –∑–∞ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º: {selector}")
                    
                    for element in elements:
                        try:
                            text = element.text.strip()
                            data_testid = element.get_attribute('data-testid') or ''
                            
                            if text and ('act_' in text or 'account' in text.lower()):
                                # –°–ø—Ä–æ–±—É—î–º–æ –≤–∏—Ç—è–≥–Ω—É—Ç–∏ ID –∑ —Ç–µ–∫—Å—Ç—É
                                import re
                                account_id_match = re.search(r'act_(\d+)', text)
                                if account_id_match:
                                    account_id = account_id_match.group(1)
                                    accounts.append({
                                        'id': f'act_{account_id}',
                                        'account_id': account_id,
                                        'name': text,
                                        'source': 'dom_extraction'
                                    })
                                    
                        except Exception as e:
                            continue
                            
                except Exception as e:
                    continue
            
            return accounts
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ DOM extraction: {e}")
            return []
    
    def extract_from_javascript(self):
        """–í–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è –∑ JavaScript –æ–±'—î–∫—Ç—ñ–≤ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ"""
        print("üîç –®—É–∫–∞—î–º–æ –≤ JavaScript –æ–±'—î–∫—Ç–∞—Ö...")
        
        accounts = []
        
        try:
            # –í–∏–∫–æ–Ω—É—î–º–æ JavaScript –¥–ª—è –ø–æ—à—É–∫—É –¥–∞–Ω–∏—Ö
            js_script = """
            var accounts = [];
            
            // –®—É–∫–∞—î–º–æ –≤ –≥–ª–æ–±–∞–ª—å–Ω–∏—Ö –æ–±'—î–∫—Ç–∞—Ö
            if (window.__INITIAL_DATA__) {
                var data = JSON.stringify(window.__INITIAL_DATA__);
                var matches = data.match(/act_(\\d+)/g);
                if (matches) {
                    matches.forEach(function(match) {
                        var id = match.replace('act_', '');
                        accounts.push({
                            id: match,
                            account_id: id,
                            name: 'Account ' + id,
                            source: 'javascript_global'
                        });
                    });
                }
            }
            
            // –®—É–∫–∞—î–º–æ –≤ localStorage
            try {
                for (var i = 0; i < localStorage.length; i++) {
                    var key = localStorage.key(i);
                    var value = localStorage.getItem(key);
                    if (value && value.includes('act_')) {
                        var matches = value.match(/act_(\\d+)/g);
                        if (matches) {
                            matches.forEach(function(match) {
                                var id = match.replace('act_', '');
                                accounts.push({
                                    id: match,
                                    account_id: id,
                                    name: 'Account ' + id,
                                    source: 'localStorage'
                                });
                            });
                        }
                    }
                }
            } catch (e) {}
            
            return accounts;
            """
            
            js_accounts = self.driver.execute_script(js_script)
            if js_accounts:
                accounts.extend(js_accounts)
                print(f"   –ó–Ω–∞–π–¥–µ–Ω–æ {len(js_accounts)} –∫–∞–±—ñ–Ω–µ—Ç—ñ–≤ –≤ JavaScript")
            
            return accounts
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ JavaScript extraction: {e}")
            return []
    
    def extract_from_network(self):
        """–í–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è –∑ –º–µ—Ä–µ–∂–µ–≤–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤ (–ª–æ–≥–∏ –±—Ä–∞—É–∑–µ—Ä–∞)"""
        print("üîç –®—É–∫–∞—î–º–æ –≤ –º–µ—Ä–µ–∂–µ–≤–∏—Ö –∑–∞–ø–∏—Ç–∞—Ö...")
        
        accounts = []
        
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ –ª–æ–≥–∏ –±—Ä–∞—É–∑–µ—Ä–∞
            logs = self.driver.get_log('performance')
            
            for log in logs:
                try:
                    message = json.loads(log['message'])
                    if 'Network.responseReceived' in message.get('method', ''):
                        response = message.get('params', {}).get('response', {})
                        url = response.get('url', '')
                        
                        if 'graphql' in url or 'adaccount' in url:
                            print(f"   –ó–Ω–∞–π–¥–µ–Ω–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∏–π –∑–∞–ø–∏—Ç: {url[:100]}...")
                            
                except Exception as e:
                    continue
            
            return accounts
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ Network extraction: {e}")
            return []
    
    def cleanup(self):
        """–ó–∞–∫—Ä–∏—Ç—Ç—è –±—Ä–∞—É–∑–µ—Ä–∞"""
        if self.driver:
            print("üßπ –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –±—Ä–∞—É–∑–µ—Ä...")
            try:
                self.driver.quit()
            except:
                pass
    
    def extract_data(self):
        """–ì–æ–ª–æ–≤–Ω–∏–π –º–µ—Ç–æ–¥ –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö"""
        try:
            # 1. –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±—Ä–∞—É–∑–µ—Ä–∞
            if not self.setup_browser():
                return None
            
            # 2. –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è cookies
            if not self.load_cookies():
                return None
            
            # 3. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
            if not self.check_login_status():
                return None
            
            # 4. –ù–∞–≤—ñ–≥–∞—Ü—ñ—è –≤ Ads Manager
            if not self.navigate_to_ads_manager():
                return None
            
            # 5. –í–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è —Ä–µ–∫–ª–∞–º–Ω–∏—Ö –∫–∞–±—ñ–Ω–µ—Ç—ñ–≤
            ad_accounts = self.extract_ad_accounts()
            
            return {
                'data': ad_accounts,
                'method': 'browser_automation',
                'facebook_id': self.facebook_id
            }
            
        except Exception as e:
            print(f"‚ùå –ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
            return None
        finally:
            self.cleanup()


class BrowserAutomationHandler(BaseHTTPRequestHandler):
    """HTTP Request Handler –¥–ª—è Browser Automation backend"""
    
    def do_OPTIONS(self):
        self.send_response(200)
        for key, value in CORS_HEADERS.items():
            self.send_header(key, value)
        self.end_headers()
    
    def do_GET(self):
        """Handle GET requests"""
        parsed_path = urlparse(self.path)
        path_parts = parsed_path.path.strip('/').split('/')
        
        if parsed_path.path == '/' or parsed_path.path == '':
            self.handle_root()
        elif path_parts == ['api', 'facebook', 'accounts']:
            self.handle_get_facebook_accounts()
        elif (len(path_parts) == 5 and path_parts[:3] == ['api', 'facebook', 'accounts'] 
              and path_parts[4] == 'adaccounts'):
            account_id = path_parts[3]
            self.handle_get_ad_accounts(account_id)
        else:
            self.send_404()
    
    def handle_root(self):
        """–ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ API"""
        self.send_response(200)
        for key, value in CORS_HEADERS.items():
            self.send_header(key, value)
        self.send_header('Content-Type', 'application/json')
        self.end_headers()
        
        response = {
            'service': 'Facebook Browser Automation Backend',
            'version': '4.0',
            'description': 'Backend –¥–ª—è –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è Facebook —Ä–µ–∫–ª–∞–º–Ω–∏—Ö –∫–∞–±—ñ–Ω–µ—Ç—ñ–≤ —á–µ—Ä–µ–∑ Selenium WebDriver',
            'methods': ['DOM Extraction', 'JavaScript Extraction', 'Network Monitoring'],
            'requirements': ['Chrome/Chromium Browser', 'ChromeDriver'],
            'endpoints': {
                'GET /': '–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ API',
                'GET /api/facebook/accounts': '–°–ø–∏—Å–æ–∫ Facebook –∞–∫–∞—É–Ω—Ç—ñ–≤',
                'GET /api/facebook/accounts/{id}/adaccounts': '–†–µ–∫–ª–∞–º–Ω—ñ –∫–∞–±—ñ–Ω–µ—Ç–∏ —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä'
            },
            'status': 'ready'
        }
        self.wfile.write(json.dumps(response, ensure_ascii=False, indent=2).encode('utf-8'))
    
    def handle_get_facebook_accounts(self):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É Facebook –∞–∫–∞—É–Ω—Ç—ñ–≤ –∑ –±–∞–∑–∏"""
        try:
            conn = sqlite3.connect('ai_buyer.db')
            cursor = conn.cursor()
            
            cursor.execute("""
                SELECT id, facebook_id, name, access_token, cookies_data, user_agent, created_at 
                FROM facebook_accounts 
                ORDER BY created_at DESC
            """)
            
            accounts = []
            for row in cursor.fetchall():
                accounts.append({
                    'id': row[0],
                    'facebook_id': row[1],
                    'name': row[2],
                    'access_token': row[3][:20] + '...' if row[3] else None,
                    'has_cookies': bool(row[4]),
                    'has_user_agent': bool(row[5]),
                    'cookies_length': len(row[4]) if row[4] else 0,
                    'created_at': row[6]
                })
            
            conn.close()
            
            self.send_response(200)
            for key, value in CORS_HEADERS.items():
                self.send_header(key, value)
            self.send_header('Content-Type', 'application/json')
            self.end_headers()
            
            response = {
                'status': 'success',
                'data': accounts,
                'count': len(accounts)
            }
            
            self.wfile.write(json.dumps(response, ensure_ascii=False).encode('utf-8'))
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–∫–∞—É–Ω—Ç—ñ–≤: {e}")
            self.send_error_response(500, f"Database error: {str(e)}")
    
    def handle_get_ad_accounts(self, account_id):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–∫–ª–∞–º–Ω–∏—Ö –∫–∞–±—ñ–Ω–µ—Ç—ñ–≤ —á–µ—Ä–µ–∑ Browser Automation"""
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∞–∫–∞—É–Ω—Ç–∞ –∑ –±–∞–∑–∏
            conn = sqlite3.connect('ai_buyer.db')
            cursor = conn.cursor()
            
            cursor.execute("""
                SELECT facebook_id, name, access_token, cookies_data, user_agent 
                FROM facebook_accounts 
                WHERE id = ?
            """, (account_id,))
            
            account_data = cursor.fetchone()
            conn.close()
            
            if not account_data:
                self.send_error_response(404, 'Facebook –∞–∫–∞—É–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π')
                return
            
            facebook_id, name, access_token, cookies_data, user_agent = account_data
            
            print(f"ü§ñ –û–±—Ä–æ–±–ª—è—î–º–æ –∞–∫–∞—É–Ω—Ç {account_id} —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä")
            print(f"   FB ID: {facebook_id}")
            print(f"   Name: {name}")
            print(f"   Cookies: {'–Ñ' if cookies_data else '–í—ñ–¥—Å—É—Ç–Ω—ñ'} ({len(cookies_data) if cookies_data else 0} —Å–∏–º–≤–æ–ª—ñ–≤)")
            print(f"   User Agent: {'–Ñ' if user_agent else '–í—ñ–¥—Å—É—Ç–Ω—ñ–π'}")
            
            if not cookies_data:
                self.send_error_response(400, 'Cookies –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ –¥–ª—è browser automation')
                return
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –µ–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä —ñ –≤–∏—Ç—è–≥—É—î–º–æ –¥–∞–Ω—ñ
            extractor = FacebookBrowserExtractor(
                cookies_data=cookies_data,
                user_agent=user_agent,
                facebook_id=facebook_id
            )
            
            # –í–∏—Ç—è–≥—É—î–º–æ –¥–∞–Ω—ñ –ø—Ä–æ —Ä–µ–∫–ª–∞–º–Ω—ñ –∫–∞–±—ñ–Ω–µ—Ç–∏
            ads_data = extractor.extract_data()
            
            if ads_data:
                method = ads_data.get('method', 'unknown')
                data_count = len(ads_data.get('data', []))
                print(f"‚úÖ –£—Å–ø—ñ—à–Ω–æ –≤–∏—Ç—è–≥–Ω—É—Ç–æ {data_count} –∫–∞–±—ñ–Ω–µ—Ç—ñ–≤ –º–µ—Ç–æ–¥–æ–º: {method}")
                
                self.send_response(200)
                for key, value in CORS_HEADERS.items():
                    self.send_header(key, value)
                self.send_header('Content-Type', 'application/json')
                self.end_headers()
                
                response = {
                    'status': 'success',
                    'account_id': account_id,
                    'facebook_id': facebook_id,
                    'method': method,
                    'count': data_count,
                    'data': ads_data
                }
                self.wfile.write(json.dumps(response, ensure_ascii=False).encode('utf-8'))
            else:
                self.send_error_response(400, '–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –ø—Ä–æ —Ä–µ–∫–ª–∞–º–Ω—ñ –∫–∞–±—ñ–Ω–µ—Ç–∏')
                
        except Exception as e:
            print(f"üö´ –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ ad accounts: {e}")
            self.send_error_response(500, f'Browser automation error: {str(e)}')
    
    def send_404(self):
        """–í—ñ–¥–ø—Ä–∞–≤–∫–∞ 404 –ø–æ–º–∏–ª–∫–∏"""
        self.send_response(404)
        for key, value in CORS_HEADERS.items():
            self.send_header(key, value)
        self.send_header('Content-Type', 'application/json')
        self.end_headers()
        
        response = {'status': 'error', 'detail': 'Endpoint not found'}
        self.wfile.write(json.dumps(response).encode())
    
    def send_error_response(self, status_code, message):
        """–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–º–∏–ª–∫–∏"""
        self.send_response(status_code)
        for key, value in CORS_HEADERS.items():
            self.send_header(key, value)
        self.send_header('Content-Type', 'application/json')
        self.end_headers()
        
        response = {'status': 'error', 'detail': message}
        self.wfile.write(json.dumps(response, ensure_ascii=False).encode('utf-8'))


def main():
    server_address = ('localhost', 8001)  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ñ–Ω—à–∏–π –ø–æ—Ä—Ç
    httpd = HTTPServer(server_address, BrowserAutomationHandler)
    
    print("ü§ñ Facebook Browser Automation Backend v4.0 –∑–∞–ø—É—â–µ–Ω–∏–π –Ω–∞ http://localhost:8001")
    print("üìã –ú–µ—Ç–æ–¥–∏ –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è:")
    print("   1Ô∏è‚É£ DOM Extraction - –ø–æ—à—É–∫ –≤ DOM –µ–ª–µ–º–µ–Ω—Ç–∞—Ö")
    print("   2Ô∏è‚É£ JavaScript Extraction - –ø–æ—à—É–∫ –≤ JS –æ–±'—î–∫—Ç–∞—Ö")
    print("   3Ô∏è‚É£ Network Monitoring - –∞–Ω–∞–ª—ñ–∑ –º–µ—Ä–µ–∂–µ–≤–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤")
    print("üìã API endpoints:")
    print("   GET /                                      - –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ API")
    print("   GET /api/facebook/accounts                 - –°–ø–∏—Å–æ–∫ –∞–∫–∞—É–Ω—Ç—ñ–≤")
    print("   GET /api/facebook/accounts/{id}/adaccounts - –†–µ–∫–ª–∞–º–Ω—ñ –∫–∞–±—ñ–Ω–µ—Ç–∏")
    print("‚ö†Ô∏è  –î–ª—è —Ä–æ–±–æ—Ç–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏: pip install selenium")
    print("‚ö†Ô∏è  –Ü ChromeDriver: brew install chromedriver (macOS)")
    
    try:
        httpd.serve_forever()
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –°–µ—Ä–≤–µ—Ä –∑—É–ø–∏–Ω–µ–Ω–∏–π")
        httpd.shutdown()


if __name__ == '__main__':
    main()